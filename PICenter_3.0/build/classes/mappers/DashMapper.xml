<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dashmapper">

	<select id="selectWebLink" resultType="hashmap"> 
		SELECT DATE_FORMAT(MAX(REGDATE), '%Y-%m-%d %H:%i:%S' ) AS RECON_LINK FROM PI_FIND
	</select>

	<select id="selectDashInfo" resultType="hashmap">
		SELECT A.TARGET_ID, A.NAME AS AGENT_NAME, B.AGENT_CONNECTED,
		B.AGENT_CONNECTED_IP,
		DATE_FORMAT(FROM_UNIXTIME(A.SEARCH_TIME),'%Y-%m-%d %H:%i:%d') as
		AGENT_STARTED,
		B.AGENT_RAM, B.AGENT_CORES,
		B.AGENT_PLATFORM_COMPATIBILITY
		FROM PI_TARGETS A 
		 	LEFT OUTER JOIN PI_AGENTS B ON A.NAME = B.AGENT_NAME AND A.AP_NO = B.AP_NO
		WHERE 1=1
		AND A.TARGET_ID = #{target_id}
		AND A.AP_NO = #{ap_no}
		ORDER BY AGENT_NAME
	</select>

	<select id="selectlastScanDate" resultType="hashmap">
		SELECT TARGET_ID, DATE_FORMAT(REGDATE, '%Y-%m-%d %H:%i:%S' ) AS REGDATE
		FROM PI_TOPCOMP
		WHERE TARGET_ID = #{target_id}
		ORDER BY REGDATE DESC LIMIT 1,1
	</select>

	<!-- mybatis-config.xml의 typeAlias에 등록해두지 않았다면 <select id="selectMember" 
		resultType="com.org.iopts.dto.MemberVO" > SELECT ID, PW ,NAME FROM TEST </select> 
		이렇게 해야 한다. -->
	<select id="selectDashMenu"
		resultType="com.org.iopts.dto.Pi_AgentVO">
		<!-- LOWER(A.NAME) -->
		<!-- SELECT DISTINCT A.TARGET_ID, A.NAME AS AGENT_NAME, B.AGENT_CONNECTED_IP, 
			B.AGENT_CONNECTED, A.COMMENTS FROM PI_TARGETS A LEFT OUTER JOIN PI_AGENTS 
			B ON A.NAME = B.AGENT_NAME ORDER BY A.NAME -->
		<!-- SELECT DISTINCT A.TARGET_ID, A.NAME AS AGENT_NAME, B.AGENT_CONNECTED_IP, 
			B.AGENT_CONNECTED, A.COMMENTS FROM PI_TARGETS A LEFT OUTER JOIN PI_AGENTS 
			B ON A.NAME = B.AGENT_NAME WHERE 1=1 AND A.TARGET_USE = 'Y' ORDER BY A.NAME -->
		SELECT
		DISTINCT
		A.TARGET_ID,
		A.NAME AS AGENT_NAME,
		B.AGENT_CONNECTED_IP,
		(CASE WHEN A.platform = 'Remote Access Only'
		THEN 1
		ELSE B.AGENT_CONNECTED
		END ) AS AGENT_CONNECTED,
		A.COMMENTS,
		A.PLATFORM
		FROM PI_TARGETS A
		LEFT OUTER JOIN PI_AGENTS B ON A.NAME = B.AGENT_NAME
		WHERE 1=1
		AND A.TARGET_USE = 'Y'
		ORDER BY A.NAME
	</select>

	<!-- 대시보드 메인차트 6개월 전, 1년 전 표기 -->
	<select id="selectDatatypeAll" resultType="hashmap">
		<!-- SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) 
			AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE4, SUM(IFNULL(A.PASSPORT,0)) AS 
			TYPE3, -->
		<!-- SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) 
			AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE3, SUM(IFNULL(A.PASSPORT,0)) AS 
			TYPE4, SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS 
			TYPE6, SUM(total) AS TOTALS FROM ( SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 
			- DUMMY.IDX MONTH) , '%Y-%m') DAYS FROM ( SELECT IDX FROM PI_DUMMY WHERE 
			IDX &lt; #{date} ) DUMMY ) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, 
			'%Y-%m') = B.DAYS GROUP BY B.DAYS -->
		SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1,
		SUM(IFNULL(A.FOREIGNER,0)) AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE3,
		SUM(IFNULL(A.PASSPORT,0)) AS TYPE4,
		SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS TYPE6,
		SUM(IFNULL(A.email,0)) AS TYPE7, SUM(IFNULL(A.mobile_phone,0)) AS
		TYPE8, SUM(total) AS TOTALS
		FROM (
		SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m')
		DAYS
		FROM
		(
		SELECT IDX FROM PI_DUMMY
		WHERE IDX &lt; #{date}
		) DUMMY
		) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') =
		B.DAYS
		GROUP BY B.DAYS
	</select>


	<!-- 대시보드 메인차트 7일 전, 1개월 전, 3개월 전 표기 -->
	<select id="selectDatatypeAll_day" resultType="hashmap">
		SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1,
		SUM(IFNULL(A.FOREIGNER,0)) AS TYPE2, SUM(IFNULL(A.PASSPORT,0)) AS
		TYPE3, SUM(IFNULL(A.DRIVER,0)) AS TYPE4,
		SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS TYPE6,
		SUM(IFNULL(A.email,0)) AS TYPE7, SUM(IFNULL(A.mobile_phone,0)) AS
		TYPE8, SUM(total) AS TOTALS
		FROM (
		SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX DAY) , '%Y-%m-%d')
		DAYS
		FROM
		(
		SELECT IDX FROM PI_DUMMY
		WHERE IDX &lt; #{date}
		) DUMMY
		) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m-%d')
		= B.DAYS
		GROUP BY B.DAYS
		<!-- SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) 
			AS TYPE2, SUM(IFNULL(A.PASSPORT,0)) AS TYPE3, SUM(IFNULL(A.DRIVER,0)) AS 
			TYPE4, SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS 
			TYPE6, SUM(total) AS TOTALS FROM ( SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 
			- DUMMY.IDX DAY) , '%Y-%m-%d') DAYS FROM ( SELECT IDX FROM PI_DUMMY WHERE 
			IDX &lt; #{date} ) DUMMY ) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, 
			'%Y-%m-%d') = B.DAYS GROUP BY B.DAYS -->

		<!-- SELECT A.GROUP_ID, A.TARGET_ID, DATE_FORMAT(A.REGDATE, '%Y.%m.%d') 
			AS REGDATE, SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN DRIVER 
			LICENSE NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE4, SUM(CASE WHEN 
			INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN B.MATCH_COUNT 
			ELSE 0 END) AS TYPE2, SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN 
			PASSPORT') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE3, SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 
			'SOUTH KOREAN RRN') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE1, SUM(CASE 
			WHEN INSTR(UPPER(B.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN B.MATCH_COUNT ELSE 
			0 END) AS TYPE5, SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'VISA') > 0 THEN 
			B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MAESTRO') 
			> 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 
			'PRIVATE LABEL CARD') > 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN 
			INSTR(UPPER(B.DATA_TYPE), 'DINERS CLUB') > 0 THEN B.MATCH_COUNT ELSE 0 END) 
			+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'JCB') > 0 THEN B.MATCH_COUNT ELSE 
			0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'LASER') > 0 THEN B.MATCH_COUNT 
			ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MASTERCARD') > 0 THEN 
			B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'AMERICAN 
			EXPRESS') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE6, (SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 
			'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END) 
			+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') 
			> 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 
			'SOUTH KOREAN PASSPORT') > 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN 
			INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN B.MATCH_COUNT ELSE 
			0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN 
			B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'VISA') 
			> 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 
			'MAESTRO') > 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 
			'PRIVATE LABEL CARD') > 0 THEN B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN 
			INSTR(UPPER(B.DATA_TYPE), 'DINERS CLUB') > 0 THEN B.MATCH_COUNT ELSE 0 END) 
			+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'JCB') > 0 THEN B.MATCH_COUNT ELSE 
			0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'LASER') > 0 THEN B.MATCH_COUNT 
			ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MASTERCARD') > 0 THEN 
			B.MATCH_COUNT ELSE 0 END) + SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'AMERICAN 
			EXPRESS') > 0 THEN B.MATCH_COUNT ELSE 0 END)) AS TOTAL, SUM(B.MATCH_COUNT) 
			AS TOTALS FROM PI_FIND A, PI_SUMMARY B, PI_USER C, PI_TARGET_USER D WHERE 
			B.OBJECT_ID = A.HASH_ID AND B.TARGET_ID = A.TARGET_ID AND B.GROUP_ID = A.GROUP_ID 
			AND D.TARGET_ID = A.TARGET_ID AND C.USER_NO = D.USER_NO AND C.USER_NO = #{user_id} 
			AND DATE_FORMAT(A.REGDATE, '%Y.%m.%d' ) >= DATE_FORMAT(SUBDATE(NOW(), INTERVAL 
			#{date} DAY),'%Y.%m.%d') GROUP BY DATE_FORMAT(A.REGDATE, '%Y.%m.%d' ) ORDER 
			BY A.REGDATE DESC -->
	</select>
	
	<select id="selectDatatypeAll_manager" resultType="hashmap">
		SELECT B.DAYS,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.RRN ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.FOREIGNER ELSE 0 END) AS TYPE2, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.DRIVER ELSE 0 END) AS TYPE3,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.PASSPORT ELSE 0 END) AS TYPE4,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.ACCOUNT_NUM ELSE 0 END) AS TYPE5, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.CARD_NUM ELSE 0 END) AS TYPE6,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.EMAIL ELSE 0 END) AS TYPE7, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.MOBILE_PHONE ELSE 0 END) AS TYPE8, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.TOTAL ELSE 0 END) AS TOTALS
		FROM (
			SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m') DAYS
			FROM
			(
				SELECT IDX FROM PI_DUMMY
				WHERE IDX &lt; #{date}
				) DUMMY
			) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') = B.DAYS
				LEFT OUTER JOIN pi_target_service_user SU ON A.TARGET_ID = SU.TARGET_ID AND A.AP_NO = SU.AP_NO
				LEFT OUTER JOIN pi_target_user TU ON A.TARGET_ID = TU.TARGET_ID AND A.AP_NO = TU.AP_NO AND A.AP_NO IN (1, 2, 3, 4) 
				<!-- LEFT OUTER JOIN PI_AP_SERVER AP ON TU.AP_NO = AP.AP_NO AND AP.IS_SERVER != 1 --> 
		AND (SU.USER_NO = '${user_no}' OR TU.USER_NO = '${user_no}')
		WHERE 1=1
		GROUP BY B.DAYS
	</select>
	
	<select id="selectDatatypeAll_day_manager" resultType="hashmap">
		SELECT B.DAYS, 
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.RRN ELSE 0 END) AS TYPE1,
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.FOREIGNER ELSE 0 END) AS TYPE2, 
    	 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.DRIVER ELSE 0 END) AS TYPE3,
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.PASSPORT ELSE 0 END) AS TYPE4,
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.ACCOUNT_NUM ELSE 0 END) AS TYPE5, 
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.CARD_NUM ELSE 0 END) AS TYPE6,
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.EMAIL ELSE 0 END) AS TYPE7, 
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.MOBILE_PHONE ELSE 0 END) AS	TYPE8, 
		 SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.TOTAL ELSE 0 END) AS TOTALS
		FROM (
			SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX DAY) , '%Y-%m-%d')	DAYS
			FROM
			(
				SELECT IDX FROM PI_DUMMY
				WHERE IDX &lt; #{date}
				) DUMMY
			) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m-%d') = B.DAYS
				LEFT OUTER JOIN pi_target_service_user SU ON A.TARGET_ID = SU.TARGET_ID AND A.AP_NO = SU.AP_NO
				LEFT OUTER JOIN pi_target_user TU ON A.TARGET_ID = TU.TARGET_ID AND A.AP_NO = TU.AP_NO AND A.AP_NO IN (1, 2, 3, 4)
				<!-- LEFT OUTER JOIN PI_AP_SERVER AP ON TU.AP_NO = AP.AP_NO AND AP.IS_SERVER != 1  --> 
		AND (SU.USER_NO = '${user_no}'OR TU.USER_NO = '${user_no}')
	 	WHERE 1=1
		GROUP BY B.DAYS
	</select>

	<select id="selectDatatype_days" resultType="hashmap">
		<!-- SELECT #{target_id}, B.DAYS, IFNULL(A.RRN, 0) AS TYPE1, IFNULL(A.FOREIGNER, 
			0) AS TYPE2, IFNULL(A.DRIVER, 0) AS TYPE4, IFNULL(A.PASSPORT, 0) AS TYPE3, -->
		<!-- SELECT #{target_id}, B.DAYS, IFNULL(A.RRN, 0) AS TYPE1, IFNULL(A.FOREIGNER, 
			0) AS TYPE2, IFNULL(A.DRIVER, 0) AS TYPE3, IFNULL(A.PASSPORT, 0) AS TYPE4, 
			IFNULL(A.account_num, 0) AS TYPE5, IFNULL(A.card_num, 0) AS TYPE6, IFNULL(total, 
			0) AS TOTALS FROM ( SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX 
			DAY) , '%Y-%m-%d') DAYS FROM ( SELECT IDX FROM PI_DUMMY WHERE IDX &lt; #{date} 
			) DUMMY ) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m-%d') 
			= B.DAYS AND target_id = #{target_id} GROUP BY B.DAYS -->
		SELECT #{target_id}, B.DAYS, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.RRN ELSE 0 END) AS TYPE1,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.FOREIGNER ELSE 0 END) AS TYPE2, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.DRIVER ELSE 0 END) AS TYPE3,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.PASSPORT ELSE 0 END) AS TYPE4,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.ACCOUNT_NUM ELSE 0 END) AS TYPE5, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.CARD_NUM ELSE 0 END) AS TYPE6,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.EMAIL ELSE 0 END) AS TYPE7, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.MOBILE_PHONE ELSE 0 END) AS TYPE8, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.TOTAL ELSE 0 END) AS TOTALS
		FROM (
		SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m')
		DAYS
		FROM
		(
		SELECT IDX FROM PI_DUMMY
		WHERE IDX &lt; #{date}
		) DUMMY
		) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') = B.DAYS
			LEFT OUTER JOIN pi_target_user TU ON A.TARGET_ID = TU.TARGET_ID AND A.AP_NO = TU.AP_NO AND A.AP_NO IN (1, 2, 3, 4)
			<!-- LEFT OUTER JOIN PI_AP_SERVER AP ON TU.AP_NO = AP.AP_NO AND AP.IS_SERVER != 1  --> 
		AND A.TARGET_ID = #{target_id}
		GROUP BY B.DAYS
	</select>

	<select id="selectDatatype" resultType="hashmap">
		<!-- SELECT #{target_id}, B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) 
			AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE4, SUM(IFNULL(A.PASSPORT,0)) AS 
			TYPE3, -->
		<!-- SELECT #{target_id}, B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) 
			AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE3, SUM(IFNULL(A.PASSPORT,0)) AS 
			TYPE4, SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS 
			TYPE6, SUM(total) AS TOTALS FROM ( SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 
			- DUMMY.IDX MONTH) , '%Y-%m') DAYS FROM ( SELECT IDX FROM PI_DUMMY WHERE 
			IDX &lt; #{date} ) DUMMY ) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, 
			'%Y-%m') = B.DAYS AND target_id = #{target_id} GROUP BY B.DAYS -->
		SELECT #{target_id}, B.DAYS,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.RRN ELSE 0 END) AS TYPE1,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.FOREIGNER ELSE 0 END) AS TYPE2, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.DRIVER ELSE 0 END) AS TYPE3,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.PASSPORT ELSE 0 END) AS TYPE4,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.ACCOUNT_NUM ELSE 0 END) AS TYPE5, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.CARD_NUM ELSE 0 END) AS TYPE6,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.EMAIL ELSE 0 END) AS TYPE7, 
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.MOBILE_PHONE ELSE 0 END) AS TYPE8,
		SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.TOTAL ELSE 0 END) AS TOTALS 
		FROM (
		SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m')
		DAYS
		FROM
		(
		SELECT IDX FROM PI_DUMMY
		WHERE IDX &lt; #{date}
		) DUMMY
		) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') = B.DAYS
			 LEFT OUTER JOIN pi_target_user TU ON A.TARGET_ID = TU.TARGET_ID AND A.AP_NO = TU.AP_NO AND A.AP_NO IN (1, 2, 3, 4)
			<!-- LEFT OUTER JOIN PI_AP_SERVER AP ON TU.AP_NO = AP.AP_NO AND AP.IS_SERVER != 1  --> 
		AND A.target_id = #{target_id}
		GROUP BY B.DAYS
	</select>
	
	<select id="selectDatatype_days_manager" resultType="hashmap">
		SELECT #{target_id}, B.DAYS, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.RRN ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.FOREIGNER ELSE 0 END) AS TYPE2, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.DRIVER ELSE 0 END) AS TYPE3,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.PASSPORT ELSE 0 END) AS TYPE4,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.ACCOUNT_NUM ELSE 0 END) AS TYPE5, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.CARD_NUM ELSE 0 END) AS TYPE6,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.EMAIL ELSE 0 END) AS TYPE7, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.MOBILE_PHONE ELSE 0 END) AS TYPE8, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.TOTAL ELSE 0 END) AS TOTALS
		FROM (
			SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX DAY) , '%Y-%m-%d')	DAYS
			FROM
			(
				SELECT IDX FROM PI_DUMMY
				WHERE IDX &lt; #{date}
				) DUMMY
			) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m-%d') = B.DAYS
			 	LEFT OUTER JOIN pi_target_user TU ON A.TARGET_ID = TU.TARGET_ID AND A.AP_NO = TU.AP_NO AND A.AP_NO IN (1, 2, 3, 4)
				<!-- LEFT OUTER JOIN PI_AP_SERVER AP ON TU.AP_NO = AP.AP_NO AND AP.IS_SERVER != 1  --> 
				AND A.TARGET_ID = #{target_id}
	 	WHERE 1=1
		GROUP BY B.DAYS
	</select>
	
	<select id="selectDatatype_manager" resultType="hashmap">
			SELECT #{target_id},
			B.DAYS, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.RRN ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.FOREIGNER ELSE 0 END) AS TYPE2, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.DRIVER ELSE 0 END) AS TYPE3,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.PASSPORT ELSE 0 END) AS TYPE4,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.ACCOUNT_NUM ELSE 0 END) AS TYPE5, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.CARD_NUM ELSE 0 END) AS TYPE6,
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.EMAIL ELSE 0 END) AS TYPE7, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.MOBILE_PHONE ELSE 0 END) AS TYPE8, 
			SUM(CASE WHEN TU.TARGET_ID IS NOT NULL THEN A.TOTAL ELSE 0 END) AS TOTALS
		FROM (
			SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m')	DAYS
			FROM
			(
				SELECT IDX FROM PI_DUMMY
				WHERE IDX &lt; #{date}
				) DUMMY
			) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') = B.DAYS
			 	LEFT OUTER JOIN pi_target_user TU ON A.TARGET_ID = TU.TARGET_ID AND A.AP_NO = TU.AP_NO AND A.AP_NO IN (1, 2, 3, 4)
				<!-- LEFT OUTER JOIN PI_AP_SERVER AP ON TU.AP_NO = AP.AP_NO AND AP.IS_SERVER != 1  --> 
				AND A.TRAGET_ID = #{target_id}
	 	WHERE 1=1
		GROUP BY B.DAYS
	</select>

	<select id="selectDatatypes" resultType="hashmap">
		<!-- SELECT DISTINCT A.target_id, A.regdate, B.NAME, C.AGENT_CONNECTED_IP 
			AS IP, MAX(A.${datatype}) AS TYPE1 FROM pi_topcomp A, PI_TARGETS B, PI_AGENTS 
			C, PI_TARGET_USER F WHERE A.target_id = B.target_id AND A.target_id = F.target_id 
			AND B.NAME = C.AGENT_NAME GROUP BY A.TARGET_ID ORDER BY ${datatype} DESC 
			LIMIT 50 -->
		<!-- SELECT DISTINCT A.TARGET_ID, A.REGDATE, B.NAME, C.AGENT_CONNECTED_IP 
			AS IP, A.${datatype} AS TYPE1 FROM PI_TOPCOMP A, PI_TARGETS B, PI_AGENTS 
			C WHERE A.REGDATE = (SELECT MAX(PI_TOPCOMP.REGDATE) FROM PI_TOPCOMP) AND 
			A.TARGET_ID = B.TARGET_ID AND B.NAME = C.AGENT_NAME GROUP BY A.TARGET_ID 
			ORDER BY ${datatype} DESC LIMIT 50 -->
		<!-- SELECT DISTINCT A.TARGET_ID, A.REGDATE, B.NAME, C.AGENT_CONNECTED_IP 
			AS IP, A.${datatype} AS TYPE1 FROM PI_TOPCOMP A, PI_TARGETS B LEFT OUTER 
			JOIN pi_agents C ON B.NAME = C.AGENT_NAME WHERE A.REGDATE = (SELECT MAX(PI_TOPCOMP.REGDATE) 
			FROM PI_TOPCOMP) AND A.TARGET_ID = B.TARGET_ID GROUP BY A.TARGET_ID ORDER 
			BY ${datatype} DESC LIMIT 50 -->
		SELECT topcomp.TARGET_ID, topcomp.REGDATE, target.NAME,
		agent.AGENT_CONNECTED_IP AS IP, IFNULL(TYPE1, 0) as TYPE1
		FROM
		PI_TARGETS target
		LEFT OUTER JOIN pi_agents agent ON target.NAME =
		agent.AGENT_NAME
		LEFT OUTER JOIN (
		SELECT TARGET_ID, REGDATE, ${datatype} AS TYPE1
		FROM PI_TOPCOMP
		WHERE REGDATE = (SELECT MAX(PI_TOPCOMP.REGDATE) FROM PI_TOPCOMP)
		)topcomp ON
		target.TARGET_ID = topcomp.TARGET_ID
		WHERE target.target_use = 'Y'
		GROUP BY target.TARGET_ID
		ORDER BY TYPE1 DESC, NAME ASC
		LIMIT 50
	</select>

	<select id="selectSystemCurrent" resultType="hashmap">
		<!-- SELECT COUNT(A.NAME) AS TOTAL, COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' 
			THEN 1 END) AS ERROR, COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHED' THEN 1 
			END) AS SEARCHED, COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME 
			= 0 THEN 1 END) AS WAIT, COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME 
			!= 0 AND A.MATCHCNT = 0 THEN 1 END) AS COMPLETE, COUNT(CASE WHEN A.SEARCH_STATUS 
			= 'AUTOMATICALLY PAUSED' THEN 1 END) AS PAUSE, SUM(CASE WHEN B.AGENT_CONNECTED 
			= 0 THEN 1 ELSE 0 END) AS NOTCONNECT FROM PI_TARGETS A, PI_AGENTS B WHERE 
			A.NAME = B.AGENT_NAME -->

		<!-- SELECT COUNT(A.NAME) AS TOTAL, COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' 
			THEN 1 END) AS ERROR, COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 
			1 END) AS SEARCHED, COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME 
			= 0 THEN 1 END) AS WAIT, COUNT( CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME 
			!= 0 AND A.MATCHCNT = 0 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 
			0 AND A.SEARCH_TIME != 0 THEN 1 END ) AS COMPLETE, COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 
			'PAUSED') > 0 THEN 1 END) AS PAUSE, COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' 
			AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 OR A.SEARCH_STATUS = 'SEARCHED' 
			AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 THEN 1 END) AS SCANCOMP, (SELECT 
			COUNT(*) FROM PI_AGENTS B WHERE B.AGENT_CONNECTED = 0) AS NOTCONNECT FROM 
			PI_TARGETS A -->
		SELECT   S.AP_NO,		 
				 S.TOTAL, 
				 S.COMPLETE, 
				 S.ERROR, 
				 S.SEARCHED, 
				 S.WAIT, 
				 S.PAUSE, 
				 S.SCANCOMP, 
				 SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
		SELECT 	A.AP_NO AS AP_NO,
				COUNT(A.NAME) AS TOTAL,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
				END) AS WAIT,
				COUNT(
				CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
				0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
				0
				THEN 1 END ) AS COMPLETE,
				COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
				PAUSE,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
				!= 0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
				0 THEN 1 END) AS SCANCOMP,
				(SELECT COUNT(*) FROM PI_AGENTS B WHERE B.AGENT_CONNECTED = 0) AS NOTCONNECT
				 FROM (SELECT T.AP_NO, T.NAME, T.SEARCH_STATUS, T.SEARCH_TIME, T.MATCHCNT
						FROM pi_ap_server AP, pi_targets T
							LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
							LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
						WHERE 1=1
							AND T.AP_NO = AP.AP_NO
							AND AP.IS_SERVER = 1
							AND T.TARGET_USE = 'Y'
							<if test="fromDate != null and toDate != null">  
							   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							</if> 
						 	AND SG.TYPE = 0
						GROUP BY T.TARGET_ID) A
		) S
		UNION ALL
		SELECT   S.AP_NO,	
				 S.TOTAL, 
				 S.COMPLETE, 
				 S.ERROR, 
				 S.SEARCHED, 
				 S.WAIT, 
				 S.PAUSE, 
				 S.SCANCOMP, 
				 SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
		SELECT  A.AP_NO AS AP_NO,
				COUNT(A.NAME) AS TOTAL,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
				END) AS WAIT,
				COUNT(
				CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
				0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
				0
				THEN 1 END ) AS COMPLETE,
				COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
				PAUSE,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
				!= 0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
				0 THEN 1 END) AS SCANCOMP,
				(SELECT COUNT(*) FROM PI_AGENTS B WHERE B.AGENT_CONNECTED = 0) AS NOTCONNECT
				FROM (SELECT T.AP_NO, T.NAME, T.SEARCH_STATUS, T.SEARCH_TIME, T.MATCHCNT
						FROM pi_ap_server AP, pi_targets T
							LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
							LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
						WHERE 1=1
							AND T.AP_NO = AP.AP_NO
							AND AP.IS_SERVER = 1
							AND T.TARGET_USE = 'Y'
						 	<if test="fromDate != null and toDate != null">  
							   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							</if> 
						 	AND SG.TYPE = 0
						 	AND T.PLATFORM = 'Remote Access Only'
						GROUP BY T.TARGET_ID) A

				#AND A.TARGET_USE = 'Y' 
		) S

	</select>
	
	<select id="selectSystemCurrentPC" resultType="hashmap">
		<!-- SELECT   S.AP_NO,	
			     S.TOTAL, 
				 S.COMPLETE, 
				 S.ERROR, 
				 S.SEARCHED, 
				 S.WAIT, 
				 S.PAUSE, 
				 S.SCANCOMP, 
				 SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
		SELECT  A.AP_NO AS AP_NO,
			    COUNT(A.NAME) AS TOTAL,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
				END) AS WAIT,
				COUNT(
				CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
				0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
				0
				THEN 1 END ) AS COMPLETE,
				COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
				PAUSE,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
				!= 0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
				0 THEN 1 END) AS SCANCOMP,
				(SELECT COUNT(*) FROM PI_AGENTS B WHERE B.AGENT_CONNECTED = 0) AS NOTCONNECT
				 FROM (SELECT T.AP_NO, T.NAME, T.SEARCH_STATUS, T.SEARCH_TIME, T.MATCHCNT
						FROM pi_targets T
							LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
							LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
						WHERE 1=1
							AND T.AP_NO != 0
							<if test="fromDate != null and toDate != null">  
							   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							</if> 
						 	AND SG.TYPE != 0
						GROUP BY T.TARGET_ID) A
		) S -->
		SELECT   S.AP_NO,	
			     S.TOTAL, 
				 S.COMPLETE, 
				 S.ERROR, 
				 S.SEARCHED, 
				 S.WAIT, 
				 S.PAUSE, 
				 S.SCANCOMP, 
				 SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
		SELECT  A.AP_NO AS AP_NO,
			    COUNT(A.NAME) AS TOTAL,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
				END) AS WAIT,
				COUNT(
				CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
				0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
				0
				THEN 1 END ) AS COMPLETE,
				COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
				PAUSE,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
				!= 0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
				0 THEN 1 END) AS SCANCOMP,
				(SELECT COUNT(*) FROM PI_AGENTS B WHERE B.AGENT_CONNECTED = 0) AS NOTCONNECT
				FROM pi_ap_server AP, PI_TARGETS A
					# LEFT OUTER JOIN pi_locations L ON A.TARGET_ID = L.TARGET_ID AND L.PROTOCOL = 'OneDrive'
				WHERE 1=1
					AND AP.AP_NO = A.AP_NO
					AND AP.IS_SERVER != 1
					AND A.TARGET_USE = 'Y'
					<if test="fromDate != null and toDate != null">  
						AND A.TARGET_ID IN
						(
							SELECT ST.TARGET_ID 
							FROM pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
								AND NOT SG.TYPE = 0
								AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate},' 23:59:59')
							GROUP BY ST.TARGET_ID, ST.AP_NO
						)
					</if> 
					<!-- <if test="targetList != null">
				  	AND A.TARGET_ID IN (
					<foreach collection="targetList" item="item" separator=",">
				        #{item}
				    </foreach>
				    )
			      </if> -->
				#AND A.TARGET_USE = 'Y' 
		) S
	</select>
	
	<select id="selectSystemCurrentManager" resultType="hashmap">
		<!-- SELECT 
		COUNT(T.TARGET_ID) AS TOTAL,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME = 0 THEN 1
		END) AS WAIT,
		COUNT(
		CASE WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME != 0 AND T.MATCHCNT =
		0
		OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT = 0 AND T.SEARCH_TIME !=
		0
		THEN 1 END ) AS COMPLETE,
		COUNT(CASE WHEN INSTR(UPPER(T.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
		PAUSE,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'NONE' AND T.MATCHCNT != 0 AND T.SEARCH_TIME
		!= 0
		OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT != 0 AND T.SEARCH_TIME !=
		0 THEN 1 END) AS SCANCOMP
		FROM PI_TARGETS T
			LEFT OUTER JOIN pi_agents A ON T.NAME = A.AGENT_NAME AND T.AP_NO = A.AP_NO
			LEFT OUTER JOIN pi_target_service_user SU ON T.TARGET_ID = SU.TARGET_ID AND T.AP_NO = SU.AP_NO
			LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
		WHERE 1=1
		AND T.AP_NO != 0
		AND T.TARGET_ID = TU.TARGET_ID
	    AND T.AP_NO = TU.AP_NO
		<if test="user_grade != 9">
		  AND (SU.USER_NO = '${user_no}' OR TU.USER_NO = '${user_no}')
	    </if> -->
	    
	    SELECT  COUNT(D.TARGET_ID) AS TOTAL,
				COUNT(CASE WHEN D.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
				COUNT(CASE WHEN D.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
				COUNT(CASE WHEN D.SEARCH_STATUS = 'NONE' AND D.SEARCH_TIME = 0 THEN 1
				END) AS WAIT,
				COUNT(
				CASE WHEN D.SEARCH_STATUS = 'NONE' AND D.SEARCH_TIME != 0 AND D.MATCHCNT =
				0
				OR D.SEARCH_STATUS = 'SEARCHED' AND D.MATCHCNT = 0 AND D.SEARCH_TIME !=
				0
				THEN 1 END ) AS COMPLETE,
				COUNT(CASE WHEN INSTR(UPPER(D.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
				PAUSE,
				COUNT(CASE WHEN D.SEARCH_STATUS = 'NONE' AND D.MATCHCNT != 0 AND D.SEARCH_TIME
				!= 0
				OR D.SEARCH_STATUS = 'SEARCHED' AND D.MATCHCNT != 0 AND D.SEARCH_TIME !=
				0 THEN 1 END) AS SCANCOMP
		FROM (
			SELECT DISTINCT T.TARGET_ID, T.SEARCH_STATUS, T.MATCHCNT, T.SEARCH_TIME, T.NAME
			FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN pi_agents A ON T.NAME = A.AGENT_NAME AND T.AP_NO = A.AP_NO
					LEFT OUTER JOIN pi_target_service_user SU ON T.TARGET_ID = SU.TARGET_ID AND T.AP_NO = SU.AP_NO
					LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
			WHERE 1=1
				AND AP.AP_NO = T.AP_NO
				AND AP.IS_SERVER != 1
				AND T.TARGET_USE = 'Y'
			 	<if test="user_grade != 9">
				  AND (SU.USER_NO = '${user_no}' OR TU.USER_NO = '${user_no}')
			    </if>
		) D
	    
	</select>
	
	<select id="selectSystemCurrentService" resultType="hashmap">
		SELECT 
		COUNT(T.TARGET_ID) AS TOTAL,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME = 0 THEN 1
		END) AS WAIT,
		COUNT(
		CASE WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME != 0 AND T.MATCHCNT =
		0
		OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT = 0 AND T.SEARCH_TIME !=
		0
		THEN 1 END ) AS COMPLETE,
		COUNT(CASE WHEN INSTR(UPPER(T.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
		PAUSE,
		COUNT(CASE WHEN T.SEARCH_STATUS = 'NONE' AND T.MATCHCNT != 0 AND T.SEARCH_TIME
		!= 0
		OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT != 0 AND T.SEARCH_TIME !=
		0 THEN 1 END) AS SCANCOMP
		FROM (
			SELECT PT.TARGET_ID, PT.SEARCH_STATUS, PT.MATCHCNT, PT.SEARCH_TIME
			FROM PI_TARGETS PT
					LEFT OUTER JOIN pi_agents A ON PT.NAME = A.AGENT_NAME AND PT.AP_NO = A.AP_NO
					LEFT OUTER JOIN pi_target_service_user SU ON PT.TARGET_ID = SU.TARGET_ID AND PT.AP_NO = SU.AP_NO
					LEFT OUTER JOIN pi_target_user TU ON PT.TARGET_ID = TU.TARGET_ID AND PT.AP_NO = TU.AP_NO
			WHERE 1=1
		<if test="user_grade != 9">
			AND (SU.USER_NO = #{user_no} OR TU.USER_NO = #{user_no} OR TU.SERVICE_USER = '${user_no}' OR TU.INFRA_MANAGER = '${user_no}')
	    </if>
	    	AND PT.TARGET_USE = 'Y'
	    GROUP BY PT.TARGET_ID
			  ) T
	</select>
	
	<select id="selectServerExcelDownload" resultType="hashmap">
		SELECT T.TARGET_ID, 
		  T.AP_NO,
		  DATE_FORMAT(SG.REGDATE, '%Y년 %m월') AS REGDATE,
		  T.NAME AS SERVER,
		  (CASE WHEN T.SEARCH_STATUS = 'ERROR' THEN '오류' 
		 		 WHEN T.SEARCH_STATUS = 'SEARCHING' THEN '검색중'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME = 0 THEN '미검색'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME != 0 AND T.MATCHCNT = 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT = 0 AND T.SEARCH_TIME != 0	THEN '결과없음'
		 		 WHEN INSTR(UPPER(T.SEARCH_STATUS), 'PAUSED') > 0 THEN '일시정지'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 THEN '검출' END) AS STATUS,
	       IFNULL(TC.PATH_CNT, 0) AS FILE,
	       IFNULL(TC.RRN, 0) AS TYPE1,
	       IFNULL(TC.MOBILE_PHONE, 0) AS TYPE2,
	       IFNULL(TC.ACCOUNT_NUM, 0) AS TYPE3,
	       IFNULL(TC.CARD_NUM, 0) AS TYPE4,
	       IFNULL(TC.FOREIGNER, 0) AS TYPE5,
	       IFNULL(TC.DRIVER, 0) AS TYPE6,
	       IFNULL(TC.EMAIL, 0) AS TYPE7,
	       IFNULL(TC.PASSPORT, 0) AS TYPE8,
	       IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
	       (SELECT COUNT(DP.HASH_ID) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS OWN,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG NOT IN (1,2) THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS FAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 3 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS LEGAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 5 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS SYS,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 1 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS DEL
		FROM pi_ap_server AP, pi_targets T
			LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
			LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
		WHERE 1=1
		AND T.AP_NO = AP.AP_NO
		AND AP.IS_SERVER = 1
		AND T.TARGET_USE = 'Y'
		<if test="fromDate != null and toDate != null">  
		   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
		</if> 
		GROUP BY T.TARGET_ID, T.AP_NO
		ORDER BY FILE DESC
	</select>
	
	<select id="selectServerExcelDownloadList" resultType="hashmap">
		SELECT T.TARGET_ID, 
		  T.AP_NO, 
		  DATE_FORMAT(SG.REGDATE, '%Y년 %m월') AS REGDATE,
		  T.NAME AS SERVER,
		  (CASE WHEN T.SEARCH_STATUS = 'ERROR' THEN '오류' 
		 		 WHEN T.SEARCH_STATUS = 'SEARCHING' THEN '검색중'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME = 0 THEN '미검색'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME != 0 AND T.MATCHCNT = 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT = 0 AND T.SEARCH_TIME != 0	THEN '결과없음'
		 		 WHEN INSTR(UPPER(T.SEARCH_STATUS), 'PAUSED') > 0 THEN '일시정지'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 THEN '검출' END) AS STATUS,
	       IFNULL(TC.PATH_CNT, 0) AS FILE,
	       IFNULL(TC.RRN, 0) AS TYPE1,
	       IFNULL(TC.MOBILE_PHONE, 0) AS TYPE2,
	       IFNULL(TC.ACCOUNT_NUM, 0) AS TYPE3,
	       IFNULL(TC.CARD_NUM, 0) AS TYPE4,
	       IFNULL(TC.FOREIGNER, 0) AS TYPE5,
	       IFNULL(TC.DRIVER, 0) AS TYPE6,
	       IFNULL(TC.EMAIL, 0) AS TYPE7,
	       IFNULL(TC.PASSPORT, 0) AS TYPE8,
	       IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
	       (SELECT COUNT(DP.HASH_ID) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS OWN,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG NOT IN (1,2) THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS FAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 3 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS LEGAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 5 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS SYS,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 1 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS DEL
		FROM pi_ap_server AP, pi_targets T
			LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
			LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
		WHERE 1=1
		AND T.AP_NO = AP.AP_NO
		AND AP.IS_SERVER = 1
			<if test="targetList != null">
			  	AND T.TARGET_ID IN (
				<foreach collection="targetList" item="item" separator=",">
			        #{item}
			    </foreach>
			    )
		    </if>
	    <if test="fromDate != null and toDate != null">  
		   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
		</if> 
		GROUP BY T.TARGET_ID, T.AP_NO
		ORDER BY FILE DESC
	</select>
	
	<select id="selectPCExcelDownload" resultType="hashmap">
		SELECT T.TARGET_ID, 
		  T.AP_NO, 
		  DATE_FORMAT(SG.REGDATE, '%Y년 %m월') AS REGDATE,
		  T.NAME AS PC,
		  IF(SUBSTRING(T.PLATFORM, 1, 5) = 'Apple', SUBSTRING_INDEX(T.NAME, '.', -1), SUBSTRING_INDEX(T.NAME, '.', 1)) AS MAC_NAME,
		  IF(SUBSTRING(T.PLATFORM, 1, 5) = 'Apple', SUBSTRING_INDEX(T.NAME, '.', 1), null) AS MAC_SERIAL,
	      T.PLATFORM,
		  (CASE WHEN T.SEARCH_STATUS = 'ERROR' THEN '오류' 
		 		 WHEN T.SEARCH_STATUS = 'SEARCHING' THEN '검색중'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME = 0 THEN '미검색'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME != 0 AND T.MATCHCNT = 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT = 0 AND T.SEARCH_TIME != 0	THEN '결과없음'
		 		 WHEN INSTR(UPPER(T.SEARCH_STATUS), 'PAUSED') > 0 THEN '일시정지'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 THEN '검출' END) AS STATUS,
	       IFNULL(TC.PATH_CNT, 0) AS FILE,
	       IFNULL(TC.RRN, 0) AS TYPE1,
	       IFNULL(TC.MOBILE_PHONE, 0) AS TYPE2,
	       IFNULL(TC.ACCOUNT_NUM, 0) AS TYPE3,
	       IFNULL(TC.CARD_NUM, 0) AS TYPE4,
	       IFNULL(TC.FOREIGNER, 0) AS TYPE5,
	       IFNULL(TC.DRIVER, 0) AS TYPE6,
	       IFNULL(TC.EMAIL, 0) AS TYPE7,
	       IFNULL(TC.PASSPORT, 0) AS TYPE8,
	       IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
	       (SELECT COUNT(DP.HASH_ID) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS OWN,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG NOT IN (1,2) THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS FAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 3 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS LEGAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 5 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS SYS,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 1 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS DEL
		FROM pi_ap_server AP, pi_targets T
			LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
			LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
		WHERE 1=1
		AND T.AP_NO = AP.AP_NO
		AND AP.IS_SERVER != 1
		<if test="fromDate != null and toDate != null">  
		   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
		</if> 
		GROUP BY T.TARGET_ID, T.AP_NO
		ORDER BY FILE DESC
	</select>
	
	<select id="selectPCExcelDownloadList" resultType="hashmap">
		SELECT T.TARGET_ID, 
		  T.AP_NO,
		  DATE_FORMAT(SG.REGDATE, '%Y년 %m월') AS REGDATE, 
		  T.NAME AS PC,
		  IF(SUBSTRING(T.PLATFORM, 1, 5) = 'Apple', SUBSTRING_INDEX(T.NAME, '.', -1), SUBSTRING_INDEX(T.NAME, '.', 1)) AS MAC_NAME,
		  IF(SUBSTRING(T.PLATFORM, 1, 5) = 'Apple', SUBSTRING_INDEX(T.NAME, '.', 1), null) AS MAC_SERIAL,
	      T.PLATFORM,
		  (CASE WHEN T.SEARCH_STATUS = 'ERROR' THEN '오류' 
		 		 WHEN T.SEARCH_STATUS = 'SEARCHING' THEN '검색중'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME = 0 THEN '미검색'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.SEARCH_TIME != 0 AND T.MATCHCNT = 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT = 0 AND T.SEARCH_TIME != 0	THEN '결과없음'
		 		 WHEN INSTR(UPPER(T.SEARCH_STATUS), 'PAUSED') > 0 THEN '일시정지'
		 		 WHEN T.SEARCH_STATUS = 'NONE' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 OR T.SEARCH_STATUS = 'SEARCHED' AND T.MATCHCNT != 0 AND T.SEARCH_TIME != 0 THEN '검출' END) AS STATUS,
	       IFNULL(TC.PATH_CNT, 0) AS FILE,
	       IFNULL(TC.RRN, 0) AS TYPE1,
	       IFNULL(TC.MOBILE_PHONE, 0) AS TYPE2,
	       IFNULL(TC.ACCOUNT_NUM, 0) AS TYPE3,
	       IFNULL(TC.CARD_NUM, 0) AS TYPE4,
	       IFNULL(TC.FOREIGNER, 0) AS TYPE5,
	       IFNULL(TC.DRIVER, 0) AS TYPE6,
	       IFNULL(TC.EMAIL, 0) AS TYPE7,
	       IFNULL(TC.PASSPORT, 0) AS TYPE8,
	       IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
	       (SELECT COUNT(DP.HASH_ID) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS OWN,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG NOT IN (1,2) THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS FAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 3 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS LEGAL,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 5 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS SYS,
	       (SELECT ((CASE WHEN DP.PROCESSING_FLAG = 1 THEN COUNT(DP.HASH_ID) ELSE 0 END)) FROM pi_data_processing DP WHERE T.TARGET_ID = DP.TARGET_ID AND T.AP_NO = DP.AP_NO) AS DEL
		FROM pi_ap_server AP, pi_targets T
			LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
			LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
		WHERE 1=1
		AND T.AP_NO = AP.AP_NO
		AND AP.IS_SERVER != 1
			<if test="targetList != null">
			  	AND T.TARGET_ID IN (
				<foreach collection="targetList" item="item" separator=",">
			        #{item}
			    </foreach>
			    )
		    </if>
	    <if test="fromDate != null and toDate != null">  
		   AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
		</if> 
		GROUP BY T.TARGET_ID, T.AP_NO
		ORDER BY FILE DESC
	</select>

	<select id="selectPathCurrent" resultType="hashmap">
		SELECT COUNT(F.PATH) -
		COUNT(DP.HASH_ID) AS NONEPATH,
		COUNT(CASE WHEN F.DELDATE != '' THEN 1 END) AS DELPATH,
		COUNT(CASE WHEN F.OWNER LIKE 'ex_%' THEN 1 END) +
		COUNT(CASE WHEN DP.PROCESSING_FLAG='5' THEN 1 END) AS EXCEPTION
		FROM pi_find F
		LEFT OUTER JOIN pi_data_processing DP ON F.HASH_ID = DP.HASH_ID AND
		DP.APPROVAL_STATUS='E'
		WHERE 1 = 1
	</select>

	<select id="selectJumpUpHost" resultType="hashmap">
		<!-- SELECT A.TOTAL, A.TOTAL_PRE, IFNULL(A.TOTAL_GAP, 0) AS TOTAL_GAP, 
			A.TARGET_ID, C.NAME FROM PI_TOPCOMP A, (SELECT IFNULL(MAX(TOTAL_GAP), 0) 
			AS GAP, TARGET_ID AS ID FROM PI_TOPCOMP GROUP BY TARGET_ID) B, pi_targets 
			AS C WHERE A.TARGET_ID = B.ID AND A.TARGET_ID = C.target_id AND IFNULL(A.TOTAL_GAP, 
			0) = B.GAP GROUP BY TARGET_ID ORDER BY TOTAL_GAP DESC, TOTAL DESC -->

		<!-- SELECT A.TOTAL, A.TOTAL_PRE, IFNULL(A.TOTAL_GAP, 0) AS TOTAL_GAP, 
			A.TARGET_ID, C.NAME FROM PI_TOPCOMP A, PI_TARGETS C WHERE A.REGDATE = (SELECT 
			MAX(PI_TOPCOMP.REGDATE) FROM PI_TOPCOMP) AND A.TARGET_ID = C.TARGET_ID GROUP 
			BY TARGET_ID ORDER BY TOTAL_GAP DESC, TOTAL DESC -->

		<!-- SELECT A.TOTAL, A.TOTAL_PRE, IFNULL(A.TOTAL_GAP, 0) AS TOTAL_GAP, 
			A.TARGET_ID, C.NAME FROM PI_TOPCOMP A, PI_TARGETS C WHERE A.REGDATE = (SELECT 
			MAX(T.REGDATE) FROM PI_TOPCOMP T WHERE T.TOTAL_GAP >= 0) AND A.TARGET_ID 
			= C.TARGET_ID GROUP BY TARGET_ID ORDER BY TOTAL_GAP DESC, TOTAL DESC LIMIT 
			20 -->

		SELECT A.TOTAL, A.TOTAL_PRE, IFNULL(A.TOTAL_GAP, 0) AS TOTAL_GAP,
		A.TARGET_ID, C.NAME
		FROM PI_TOPCOMP A, PI_TARGETS C
		WHERE A.REGDATE = (SELECT MAX(T.REGDATE) FROM PI_TOPCOMP T WHERE
		T.TOTAL_GAP >= 0)
		AND A.TARGET_ID = C.TARGET_ID
		GROUP BY TARGET_ID
		ORDER BY TOTAL DESC
		LIMIT 20
	</select>
	
	<!-- <select id="selectDashDataDetectionList" resultType="hashmap">
		SELECT DET.TARGET_ID, 
			DET.AP_NO,
			IFNULL(FORMAT(SUM(DET.PATH_CNT), '##,##0'), 0) AS PATH_CNT,
			IFNULL(FORMAT(SUM(COMPLETE), '##,##0'), 0) AS COMPLETE,
			IFNULL(FORMAT(SUM(DET.PATH_CNT) - SUM(COMPLETE), '##,##0'), 0) AS INCOMPLETE
		FROM (SELECT 
				TC.TARGET_ID, 
				TC.AP_NO, 
				TC.REGDATE, 
				TC.PATH_CNT, 
				D.NAME,
				(SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
			FROM (
				SELECT MAX(TC.REGDATE) AS REGDATE, 
					TC.TARGET_ID, 
					TC.AP_NO,
					T.NAME
				FROM pi_topcomp TC, pi_targets T
				LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			    LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
				WHERE 1 = 1
				  AND T.TARGET_ID = TC.TARGET_ID 
				  AND T.AP_NO = TC.AP_NO
				  <if test="fromDate != null and toDate != null">  
				   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
				  </if>
				GROUP BY TC.TARGET_ID, TC.AP_NO
			) D, pi_topcomp TC
			WHERE TC.TARGET_ID = D.TARGET_ID
			  AND TC.AP_NO = D.AP_NO
			  AND TC.REGDATE = D.REGDATE
		) DET;
	</select> -->
	
	<select id="selectDashDataDetectionServerList" resultType="hashmap">
		<!-- SELECT DET.TARGET_ID, 
			DET.AP_NO,
			IFNULL(FORMAT(SUM(DET.PATH_CNT), '##,##0'), 0) AS PATH_CNT,
			IFNULL(FORMAT(SUM(COMPLETE), '##,##0'), 0) AS COMPLETE,
			IFNULL(FORMAT(SUM(DET.PATH_CNT) - SUM(COMPLETE), '##,##0'), 0) AS INCOMPLETE
		FROM (SELECT 
				TC.TARGET_ID, 
				TC.AP_NO, 
				TC.REGDATE, 
				TC.PATH_CNT, 
				D.NAME,
				(SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
			FROM (
				SELECT MAX(TC.REGDATE) AS REGDATE, 
					TC.TARGET_ID, 
					TC.AP_NO,
					T.NAME
				FROM pi_topcomp TC, pi_targets T
				LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			    LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
				WHERE 1 = 1
				  AND T.TARGET_ID = TC.TARGET_ID 
				  AND T.AP_NO = TC.AP_NO
				  <if test="fromDate != null and toDate != null">  
				   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
				  </if>
				GROUP BY TC.TARGET_ID, TC.AP_NO
			) D, pi_topcomp TC
			WHERE TC.TARGET_ID = D.TARGET_ID
			  AND TC.AP_NO = D.AP_NO
			  AND TC.REGDATE = D.REGDATE
		) DET
		WHERE 1 = 1
		AND DET.AP_NO = 0 -->
		SELECT D.TARGET_ID, D.AP_NO, 
		FORMAT(SUM(D.PATH_CNT), '##,##0') AS PATH_CNT, 
		FORMAT(SUM(D.COMPLETE), '##,##0') AS COMPLETE,
		FORMAT(SUM(D.PATH_CNT) - SUM(D.COMPLETE), '##,##0') AS INCOMPLETE
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME,
						 IFNULL(TC.PATH_CNT, 0) AS PATH_CNT,
						 (SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
				FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1

						AND AP.AP_NO = T.AP_NO
						AND AP.IS_SERVER = 1
						AND T.TARGET_USE = 'Y'
						
						AND T.TARGET_ID IN (
							SELECT ST.TARGET_ID 
							FROM pi_ap_server AP, pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID

									AND SG.TYPE = 0
									<if test="fromDate != null and toDate != null">  
										AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
									</if>
									GROUP BY ST.TARGET_ID, ST.AP_NO
												)

						GROUP BY T.TARGET_ID, T.AP_NO
						)D
			LEFT OUTER JOIN pi_topcomp TC ON TC.TARGET_ID = D.TARGET_ID AND TC.AP_NO = D.AP_NO AND TC.REGDATE = D.REGDATE
		WHERE 1=1
		ORDER BY D.PATH_CNT DESC
	</select>
	
	<select id="selectDashDataDetectionPCList" resultType="hashmap">
		<!-- SELECT DET.TARGET_ID, 
			DET.AP_NO,
			IFNULL(FORMAT(SUM(DET.PATH_CNT), '##,##0'), 0) AS PATH_CNT,
			IFNULL(FORMAT(SUM(COMPLETE), '##,##0'), 0) AS COMPLETE,
			IFNULL(FORMAT(SUM(DET.PATH_CNT) - SUM(COMPLETE), '##,##0'), 0) AS INCOMPLETE
		FROM (SELECT 
				TC.TARGET_ID, 
				TC.AP_NO, 
				TC.REGDATE, 
				TC.PATH_CNT, 
				D.NAME,
				(SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
			FROM (
				SELECT MAX(TC.REGDATE) AS REGDATE, 
					TC.TARGET_ID, 
					TC.AP_NO,
					T.NAME
				FROM pi_topcomp TC, pi_targets T
				WHERE 1 = 1
				  AND T.TARGET_ID = TC.TARGET_ID 
				  AND T.AP_NO = TC.AP_NO
				  <if test="fromDate != null and toDate != null">  
					  AND T.TARGET_ID IN (
							SELECT ST.TARGET_ID 
							FROM pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
								AND NOT SG.TYPE = 0
							   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							GROUP BY ST.TARGET_ID, ST.AP_NO
					   )
		    	  </if>
				GROUP BY TC.TARGET_ID, TC.AP_NO
			) D, pi_topcomp TC
			WHERE TC.TARGET_ID = D.TARGET_ID
			  AND TC.AP_NO = D.AP_NO
			  AND TC.REGDATE = D.REGDATE
		) DET -->
		SELECT D.TARGET_ID, D.AP_NO, 
		FORMAT(SUM(D.PATH_CNT), '##,##0') AS PATH_CNT, 
		FORMAT(SUM(D.COMPLETE), '##,##0') AS COMPLETE,
		FORMAT(SUM(D.PATH_CNT) - SUM(D.COMPLETE), '##,##0') AS INCOMPLETE
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME,
						 IFNULL(TC.PATH_CNT, 0) AS PATH_CNT,
						 (SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
				FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1

						AND AP.AP_NO = T.AP_NO
						AND AP.IS_SERVER != 1
						
						AND T.TARGET_ID IN (
							SELECT ST.TARGET_ID 
							FROM pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID

									AND SG.TYPE != 0
									<if test="fromDate != null and toDate != null">  
										AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
									</if>
									GROUP BY ST.TARGET_ID, ST.AP_NO
												)

						GROUP BY T.TARGET_ID, T.AP_NO
						)D
			LEFT OUTER JOIN pi_topcomp TC ON TC.TARGET_ID = D.TARGET_ID AND TC.AP_NO = D.AP_NO AND TC.REGDATE = D.REGDATE
		WHERE 1=1
		ORDER BY D.PATH_CNT DESC
	</select>
	
	<select id="selectDashDataCompleteList" resultType="hashmap">
		SELECT
			IFNULL(FORMAT(SUM(COUNT_OWN), '##,##0'), 0) AS OWN,
			IFNULL(FORMAT(SUM(COUNT_FAL), '##,##0'), 0) AS FAL,
			IFNULL(FORMAT(SUM(COUNT_LEGAL), '##,##0'), 0) AS LEGAL,
			IFNULL(FORMAT(SUM(COUNT_SYS), '##,##0'), 0) AS SYS,
			IFNULL(FORMAT(SUM(COUNT_DEL), '##,##0'), 0) AS DEL
		FROM
		(SELECT 
			PR.TARGET_ID,
			PR.AP_NO,
			COUNT(PR.HASH_ID) AS 'COUNT_OWN',
			(CASE WHEN PR.PROCESSING_FLAG NOT IN (1,2) THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_FAL',
			(CASE WHEN PR.PROCESSING_FLAG = 3 THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_LEGAL',
			(CASE WHEN PR.PROCESSING_FLAG = 5 THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_SYS',
			(CASE WHEN PR.PROCESSING_FLAG = 1 THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_DEL'
		FROM pi_ap_server AP, pi_data_processing PR
			LEFT OUTER JOIN pi_targets T ON PR.TARGET_ID = T.TARGET_ID AND PR.AP_NO = T.AP_NO
		WHERE T.AP_NO = AP.AP_NO
		AND AP.IS_SERVER = 1
		AND T.TARGET_USE = 'Y'
			<if test='target_id != "" and target_id != null'>
				AND T.TARGET_ID = #{target_id}
 			</if>
		GROUP BY PR.TARGET_ID, PR.AP_NO
		) D
	</select>
	
	<select id="selectDashDataDetectionItemList" resultType="hashmap">
		<!-- SELECT DET.TARGET_ID, 
			DET.AP_NO,
			IFNULL(FORMAT(SUM(DET.PATH_CNT), '##,##0'), 0) AS PATH_CNT,
			IFNULL(FORMAT(SUM(COMPLETE), '##,##0'), 0) AS COMPLETE,
			IFNULL(FORMAT(SUM(DET.PATH_CNT) - SUM(COMPLETE), '##,##0'), 0) AS INCOMPLETE
		FROM (SELECT 
				TC.TARGET_ID, 
				TC.AP_NO, 
				TC.REGDATE, 
				TC.PATH_CNT, 
				D.NAME,
				(SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
			FROM (
				SELECT MAX(TC.REGDATE) AS REGDATE, 
					TC.TARGET_ID, 
					TC.AP_NO,
					T.NAME
				FROM pi_topcomp TC, pi_targets T
				WHERE 1 = 1
				  AND T.TARGET_ID = TC.TARGET_ID 
				  AND T.AP_NO = TC.AP_NO
		  			<if test='target_id != "" and target_id != null'>
						AND T.TARGET_ID = #{target_id}
		 			</if>
				GROUP BY TC.TARGET_ID, TC.AP_NO
			) D, pi_topcomp TC
			WHERE TC.TARGET_ID = D.TARGET_ID
			  AND TC.AP_NO = D.AP_NO
			  AND TC.REGDATE = D.REGDATE
		) DET -->
		SELECT D.TARGET_ID, D.AP_NO, 
		FORMAT(SUM(D.PATH_CNT), '##,##0') AS PATH_CNT, 
		FORMAT(SUM(D.COMPLETE), '##,##0') AS COMPLETE,
		FORMAT(SUM(D.PATH_CNT) - SUM(D.COMPLETE), '##,##0') AS INCOMPLETE
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME,
						 IFNULL(TC.PATH_CNT, 0) AS PATH_CNT,
						 (SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
				FROM pi_targets T
					LEFT OUTER JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1
					<if test='target_id != "" and target_id != null'>
						AND T.TARGET_ID = #{target_id}
		 			</if>
		 		GROUP BY T.TARGET_ID, T.AP_NO
				)D
			LEFT OUTER JOIN pi_topcomp TC ON TC.TARGET_ID = D.TARGET_ID AND TC.AP_NO = D.AP_NO AND TC.REGDATE = D.REGDATE
		WHERE 1=1
		ORDER BY D.PATH_CNT DESC	
	</select>
	
	<select id="selectDashPersonalServerDetectionItemList" resultType="hashmap">
		<!-- SELECT DET.TARGET_ID, 
			DET.AP_NO,
			IFNULL(FORMAT(SUM(DET.PATH_CNT), '##,##0'), 0) AS PATH_CNT,
			IFNULL(FORMAT(SUM(COMPLETE), '##,##0'), 0) AS COMPLETE,
			IFNULL(FORMAT(SUM(DET.PATH_CNT) - SUM(COMPLETE), '##,##0'), 0) AS INCOMPLETE
		FROM (SELECT 
				TC.TARGET_ID, 
				TC.AP_NO, 
				TC.REGDATE, 
				TC.PATH_CNT, 
				D.NAME,
				(SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
			FROM (
				SELECT MAX(TC.REGDATE) AS REGDATE, 
					TC.TARGET_ID, 
					TC.AP_NO,
					T.NAME
				FROM pi_topcomp TC, pi_targets T
				WHERE 1 = 1
				  AND T.TARGET_ID = TC.TARGET_ID 
				  AND T.AP_NO = TC.AP_NO
					<if test="targetList != null">
					  	AND T.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=",">
					        #{item}
					    </foreach>
					    )
				    </if>
				GROUP BY TC.TARGET_ID, TC.AP_NO
			) D, pi_topcomp TC
			WHERE TC.TARGET_ID = D.TARGET_ID
			  AND TC.AP_NO = D.AP_NO
			  AND TC.REGDATE = D.REGDATE
		) DET; -->
		SELECT D.TARGET_ID, D.AP_NO, 
		FORMAT(SUM(D.PATH_CNT), '##,##0') AS PATH_CNT, 
		FORMAT(SUM(D.COMPLETE), '##,##0') AS COMPLETE,
		FORMAT(SUM(D.PATH_CNT) - SUM(D.COMPLETE), '##,##0') AS INCOMPLETE
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME,
						 IFNULL(TC.PATH_CNT, 0) AS PATH_CNT,
						 (SELECT COUNT(*) FROM pi_data_processing DP WHERE TC.TARGET_ID = DP.TARGET_ID AND TC.AP_NO = DP.AP_NO AND DP.APPROVAL_STATUS = 'E') AS COMPLETE
				FROM pi_targets T
					LEFT OUTER JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1
					<if test="targetList != null">
					  	AND T.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=",">
					        #{item}
					    </foreach>
					    )
				    </if>
		 		GROUP BY T.TARGET_ID, T.AP_NO
				)D
			LEFT OUTER JOIN pi_topcomp TC ON TC.TARGET_ID = D.TARGET_ID AND TC.AP_NO = D.AP_NO AND TC.REGDATE = D.REGDATE
		WHERE 1=1
		ORDER BY D.PATH_CNT DESC	
	</select>
	
	<select id="selectDashPersonalServerComplete" resultType="hashmap">
		SELECT
			IFNULL(FORMAT(SUM(COUNT_OWN), '##,##0'), 0) AS OWN,
			IFNULL(FORMAT(SUM(COUNT_FAL), '##,##0'), 0) AS FAL,
			IFNULL(FORMAT(SUM(COUNT_LEGAL), '##,##0'), 0) AS LEGAL,
			IFNULL(FORMAT(SUM(COUNT_SYS), '##,##0'), 0) AS SYS,
			IFNULL(FORMAT(SUM(COUNT_DEL), '##,##0'), 0) AS DEL
		FROM
			(SELECT 
				PR.TARGET_ID,
				PR.AP_NO,
				COUNT(PR.HASH_ID) AS 'COUNT_OWN',
				(CASE WHEN PR.PROCESSING_FLAG NOT IN (1,2) THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_FAL',
				(CASE WHEN PR.PROCESSING_FLAG = 3 THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_LEGAL',
				(CASE WHEN PR.PROCESSING_FLAG = 5 THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_SYS',
				(CASE WHEN PR.PROCESSING_FLAG = 1 THEN COUNT(PR.HASH_ID) ELSE 0 END)  AS 'COUNT_DEL'
			FROM pi_ap_server AP, pi_data_processing PR
				LEFT OUTER JOIN pi_targets T ON PR.TARGET_ID = T.TARGET_ID AND PR.AP_NO = T.AP_NO
			WHERE T.AP_NO = AP.AP_NO
					<if test="targetList != null">
					  	AND PR.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=",">
					        #{item}
					    </foreach>
					    )
				    </if>
			GROUP BY PR.TARGET_ID, PR.AP_NO
			
			) D
	</select>
	
	<select id="selectDashDataRank" resultType="hashmap">
		<!-- SELECT ROW_NUMBER() OVER(ORDER BY D.FILE DESC) AS NUM, D.*  
		FROM (SELECT T.TARGET_ID, T.AP_NO, T.NAME AS SERVER,
		             IFNULL(MAX(TC.PATH_CNT), 0) AS FILE,
		             IFNULL((SELECT TC.TOTAL FROM pi_topcomp TC 
		                        WHERE T.AP_NO = TC.AP_NO AND T.TARGET_ID = TC.TARGET_ID HAVING MAX(TC.REGDATE)),0) AS COUNT
		      FROM pi_targets T
		      LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
		      LEFT OUTER JOIN pi_schedule_targets ST ON T.TARGET_ID = ST.TARGET_ID
			  LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND T.AP_NO = SG.TYPE
		      WHERE 1=1
		      <if test='id == "server" || id == "" ||  id == null'>
		      	AND T.AP_NO = 0
		      </if>
			  <if test='id == "pc"'>
		  		AND T.AP_NO != 0
			  </if>
			  <if test="fromDate != null and toDate != null">  
			   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
			  </if> 
		      GROUP BY T.TARGET_ID, T.AP_NO
		      ) D, (SELECT @ROW_NUM:=0) AS N
	    ORDER BY FILE DESC -->
		SELECT D.TARGET_ID, D.AP_NO, D.PLATFORM, D.NAME AS SERVER,
				 D.FILE, D.COUNT
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME AS FULL_NAME,
						 T.TARGET_USE,
						 IFNULL(TC.PATH_CNT, 0) AS FILE,
						 IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
						 SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
						 SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
						 SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
						 T.PLATFORM
				FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN (SELECT PTC.*
							FROM pi_topcomp PTC, (SELECT MAX(regdate) AS REGDATE, target_id,ap_no
															FROM pi_topcomp 
															GROUP BY target_id) DTC
							WHERE PTC.target_id = DTC.TARGET_ID
								AND PTC.regdate = DTC.REGDATE
								AND PTC.ap_no = DTC.AP_NO) TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1
					AND T.AP_NO = AP.AP_NO
					<if test='id == "server" || id == "" ||  id == null'>
						AND AP.IS_SERVER = 1
					</if>
					<if test='id == "pc"'>
						AND AP.IS_SERVER != 1
					</if>
					AND T.TARGET_USE = 'Y'
					<if test="fromDate != null and toDate != null">  
						AND T.TARGET_ID IN (
							SELECT ST.TARGET_ID 
							FROM pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
								<if test='id == "server" || id == "" ||  id == null'>
									AND SG.TYPE = 0
								</if>
								<if test='id == "pc"'>
									AND SG.TYPE != 0
								</if>
							 	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							GROUP BY ST.TARGET_ID, ST.AP_NO
												)
					</if>
						GROUP BY T.TARGET_ID, T.AP_NO
						)D
		WHERE 1=1
		ORDER BY D.FILE DESC
	</select>
	
	<select id="selectDashPersonalServerRank" resultType="hashmap">
		<!-- SELECT ROW_NUMBER() OVER(ORDER BY D.FILE DESC) AS NUM, D.*  
			FROM (SELECT T.TARGET_ID, T.AP_NO, T.NAME AS SERVER,
	             IFNULL(MAX(TC.PATH_CNT), 0) AS FILE,
	             IFNULL((SELECT TC.TOTAL FROM pi_topcomp TC 
	                        WHERE T.AP_NO = TC.AP_NO AND T.TARGET_ID = TC.TARGET_ID HAVING MAX(TC.REGDATE)),0) AS COUNT
	    FROM pi_targets T
	    LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
	    WHERE 1=1
     		AND T.AP_NO = 0
		  <if test="targetList != null">
		  	AND T.TARGET_ID IN (
			<foreach collection="targetList" item="item" separator=",">
		        #{item}
		    </foreach>
		    )
	      </if>
	    GROUP BY T.TARGET_ID, T.AP_NO
	    ) D, (SELECT @ROW_NUM:=0) AS N
	    ORDER BY FILE DESC -->
	    SELECT D.TARGET_ID, D.AP_NO, D.PLATFORM, D.NAME AS SERVER,
				 D.FILE, D.COUNT
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME AS FULL_NAME,
						 T.TARGET_USE,
						 IFNULL(TC.PATH_CNT, 0) AS FILE,
						 IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
						 SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
						 SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
						 SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
						 T.PLATFORM
				FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN (SELECT PTC.*
							FROM pi_topcomp PTC, (SELECT MAX(regdate) AS REGDATE, target_id,ap_no
															FROM pi_topcomp 
															GROUP BY target_id) DTC
							WHERE PTC.target_id = DTC.TARGET_ID
								AND PTC.regdate = DTC.REGDATE
								AND PTC.ap_no = DTC.AP_NO) TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1
					AND T.AP_NO = AP.AP_NO
					<if test="targetList != null">
						AND T.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=",">
							#{item}
						</foreach>
						)
					</if>
				GROUP BY T.TARGET_ID, T.AP_NO
				)D
		WHERE 1=1
		ORDER BY D.FILE DESC
	</select>
	
	<select id="selectDashPersonalPCRank" resultType="hashmap">
		<!-- SELECT ROW_NUMBER() OVER(ORDER BY D.FILE DESC) AS NUM, D.*  
			FROM (SELECT T.TARGET_ID, T.AP_NO, T.NAME AS SERVER,
	             IFNULL(MAX(TC.PATH_CNT), 0) AS FILE,
	             IFNULL((SELECT TC.TOTAL FROM pi_topcomp TC 
	                        WHERE T.AP_NO = TC.AP_NO AND T.TARGET_ID = TC.TARGET_ID HAVING MAX(TC.REGDATE)),0) AS COUNT
	    FROM pi_targets T
	    LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
	    WHERE 1=1
     		AND T.AP_NO != 0
		  <if test="targetList != null">
		  	AND T.TARGET_ID IN (
			<foreach collection="targetList" item="item" separator=",">
		        #{item}
		    </foreach>
		    )
	      </if>
	    GROUP BY T.TARGET_ID, T.AP_NO
	    ) D, (SELECT @ROW_NUM:=0) AS N
	    ORDER BY FILE DESC -->
	    SELECT D.TARGET_ID, D.AP_NO, D.PLATFORM, D.NAME AS SERVER,
				 D.FILE, D.COUNT
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME AS FULL_NAME,
						 T.TARGET_USE,
						 IFNULL(TC.PATH_CNT, 0) AS FILE,
						 IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
						 SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
						 SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
						 SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
						 T.PLATFORM
				FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
				WHERE 1=1
					AND T.AP_NO = AP.AP_NO
					AND AP.IS_SERVER != 1
					<if test="targetList != null">
						AND T.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=",">
							#{item}
						</foreach>
						)
					</if>
				GROUP BY T.TARGET_ID, T.AP_NO
				)D
			LEFT OUTER JOIN pi_topcomp TC ON TC.TARGET_ID = D.TARGET_ID AND TC.AP_NO = D.AP_NO AND TC.REGDATE = D.REGDATE
		WHERE 1=1
		ORDER BY D.FILE DESC
	</select>
	
	<select id="selectDashPersonalManagerRank" resultType="hashmap">
		<!-- SELECT ROW_NUMBER() OVER(ORDER BY D.FILE DESC) AS NUM, D.*  
			FROM (SELECT T.TARGET_ID, T.AP_NO, T.NAME AS SERVER,
	             IFNULL(MAX(TC.PATH_CNT), 0) AS FILE,
	             IFNULL((SELECT TC.TOTAL FROM pi_topcomp TC 
	                        WHERE T.AP_NO = TC.AP_NO AND T.TARGET_ID = TC.TARGET_ID HAVING MAX(TC.REGDATE)),0) AS COUNT
	    FROM pi_targets T
	    LEFT JOIN pi_topcomp TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
	    WHERE 1=1
     		AND T.AP_NO != 0
		  <if test="targetList != null">
		  	AND T.TARGET_ID IN (
			<foreach collection="targetList" item="item" separator=",">
		        #{item}
		    </foreach>
		    )
	      </if>
	    GROUP BY T.TARGET_ID, T.AP_NO
	    ) D, (SELECT @ROW_NUM:=0) AS N
	    ORDER BY FILE DESC -->
	    SELECT D.TARGET_ID, D.AP_NO, D.PLATFORM, D.NAME AS SERVER,
				 D.FILE, D.COUNT
		FROM (SELECT MAX(TC.REGDATE) AS REGDATE,
						 T.TARGET_ID,
						 T.AP_NO,
						 T.NAME AS FULL_NAME,
						 T.TARGET_USE,
						 IFNULL(TC.PATH_CNT, 0) AS FILE,
						 IFNULL(TC.RRN + TC.MOBILE_PHONE + TC.ACCOUNT_NUM + TC.CARD_NUM + TC.FOREIGNER + TC.DRIVER + TC.EMAIL + TC.PASSPORT, 0) AS COUNT,
						 SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
						 SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
						 SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
						 T.PLATFORM
				FROM pi_ap_server AP, pi_targets T
					LEFT OUTER JOIN (SELECT PTC.*
								        FROM pi_topcomp PTC, (SELECT MAX(regdate) AS REGDATE, target_id,ap_no
								                                        FROM pi_topcomp 
								                                        GROUP BY target_id) DTC
								        WHERE PTC.target_id = DTC.TARGET_ID
								            AND PTC.regdate = DTC.REGDATE
								            AND PTC.ap_no = DTC.AP_NO) TC ON T.TARGET_ID = TC.TARGET_ID AND T.AP_NO = TC.AP_NO
					LEFT OUTER JOIN pi_agents A ON T.NAME = A.AGENT_NAME AND T.AP_NO = A.AP_NO
					LEFT OUTER JOIN pi_target_service_user SU ON T.TARGET_ID = SU.TARGET_ID AND T.AP_NO = SU.AP_NO
					LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
				WHERE 1=1
					AND T.AP_NO = AP.AP_NO
					AND AP.IS_SERVER != 1
					AND T.TARGET_USE = 'Y'
					<if test='user_no != "" and user_no != null'>
					  AND (SU.USER_NO = #{user_no} OR TU.USER_NO = #{user_no})
		            </if>
				GROUP BY T.TARGET_ID, T.AP_NO
				)D
			LEFT OUTER JOIN pi_topcomp TC ON TC.TARGET_ID = D.TARGET_ID AND TC.AP_NO = D.AP_NO AND TC.REGDATE = D.REGDATE
		WHERE 1=1
		ORDER BY D.FILE DESC
	</select>
	
	<select id="selectDashDataTodoList" resultType="hashmap">
		SELECT COUNT(DPG.IDX) AS LIST_TOTAL
		FROM PI_DATA_PROCESSING_GROUP DPG
		WHERE 1 = 1
		  AND DPG.APPROVAL_STATUS IN ('W', '')
		  <if test='user_no != "" and user_no != null'>
          AND (DPG.USER_NO = #{user_no} OR DPG.OK_USER_NO = #{user_no});
          </if>
	</select>
	
	<select id="selectDashDataTodoApproval" resultType="hashmap">
     	SELECT COUNT(DPCG.DATA_PROCESSING_CHARGE_ID) AS APPROVAL_TOTAL
        FROM PI_DATA_PROCESSING_CHARGE_GROUP AS DPCG
        WHERE 1 = 1
          AND DPCG.APPROVAL_STATUS = 'W'
          <if test='user_no != "" and user_no != null'>
          AND (DPCG.USER_NO = #{user_no} OR DPCG.OK_USER_NO = #{user_no});
          </if>
	</select>
	
	<select id="selectDashDataTodoSchedule" resultType="hashmap">
		SELECT COUNT(*) AS SCHEDULE_TOTAL
		FROM pi_schedule_group G
		WHERE 1=1
			AND G.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
			<if test='user_no != "" and user_no != null'>
		 	AND USER_NO = #{user_no}
		 	</if>
	</select>
	
	<select id="selectDashDataPersonalServer" resultType="hashmap">
	    SELECT D.SCHEDULE_GROUP_ID,
			D.USER_NO,
			D.STATUS,
			D.TARGET_ID,
			D.AP_NO,
			D.TYPE,
			CONCAT(CAST(D.REGDATE AS CHAR),'_', COUNT(D.TARGET_ID), '대') AS RESULT,
			D.REGDATE
		FROM (SELECT SG.SCHEDULE_GROUP_ID,
		      SG.USER_NO,
		      SG.STATUS,
		      ST.TARGET_ID,
		      ST.AP_NO,
		      SG.TYPE,
		      DATE_FORMAT(SG.REGDATE, '%Y년%m월') AS REGDATE
		      FROM pi_schedule_group SG, pi_schedule_targets ST
		      WHERE 
					SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
				<if test="fromDate != null and fromDate != '' and toDate != null and toDate != '' ">
					AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate},' 23:59:59')
			 	</if>
			 		AND SG.TYPE = 0	
		      GROUP BY SG.SCHEDULE_GROUP_ID) D
		GROUP BY REGDATE
	</select>
	
	<select id="selectDashDataPersonalPC" resultType="hashmap">
	    SELECT D.SCHEDULE_GROUP_ID,
			D.USER_NO,
			D.STATUS,
			D.TARGET_ID,
			D.AP_NO,
			D.TYPE,
			CONCAT(CAST(D.REGDATE AS CHAR),'_', COUNT(D.TARGET_ID), '대') AS RESULT,
			D.REGDATE
		FROM (SELECT SG.SCHEDULE_GROUP_ID,
		      SG.USER_NO,
		      SG.STATUS,
		      ST.TARGET_ID,
		      ST.AP_NO,
		      SG.TYPE,
		      DATE_FORMAT(SG.REGDATE, '%Y년%m월') AS REGDATE
		      FROM pi_schedule_group SG, pi_schedule_targets ST
		      WHERE 
					SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
				<if test="fromDate != null and fromDate != '' and toDate != null and toDate != '' ">
					AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate},' 23:59:59')
			 	</if>
			 		AND NOT SG.TYPE = 0	
		      GROUP BY SG.SCHEDULE_GROUP_ID) D
		GROUP BY REGDATE
	</select>
	
	<select id="selectDashDataPersonalServerCount" resultType="hashmap">
		SELECT 
			(SELECT COUNT(*) FROM pi_targets T WHERE T.AP_NO = 0) AS SERVER_CNT,
			(SELECT COUNT(*) FROM pi_targets T WHERE T.AP_NO != 0) AS PC_CNT
	</select>
	
	<select id="selectDashDataPersonalServerCircle" resultType="hashmap">
		SELECT  D.AP_NO,
				 D.TOTAL,
				 D.ERROR,
				 D.SEARCHED,
				 D.WAIT,
				 D.COMPLETE,
				 D.PAUSE,
				 D.SCANCOMP,
				 SUM(D.COMPLETE + D.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM(
			SELECT  A.AP_NO AS AP_NO,
					A.TARGET_ID,
					 COUNT(A.TARGET_ID) AS TOTAL,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
					 END) AS WAIT,
					 COUNT(
					 CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
					 0
					 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
					 0
					 THEN 1 END ) AS COMPLETE,
					 COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
					 PAUSE,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
					 != 0
					 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
					 0 THEN 1 END) AS SCANCOMP
			FROM
				(SELECT  SG.SCHEDULE_GROUP_ID,
							SG.USER_NO,
							SG.STATUS,
							T.TARGET_ID,
							T.AP_NO,
							T.SEARCH_STATUS,
							T.SEARCH_TIME,
							T.MATCHCNT,
							SG.TYPE,
							DATE_FORMAT(T.REGDATE, '%Y%m') AS ID,
							DATE_FORMAT(T.REGDATE, '%Y년 %m월') AS REGDATE
				FROM pi_schedule_group SG, pi_targets T
				WHERE 1=1
				  AND SG.TYPE = 0
				  <if test="targetList != null">
				  	AND T.TARGET_ID IN (
					<foreach collection="targetList" item="item" separator=",">
				        #{item}
				    </foreach>
				    )
			      </if>
				  #AND T.TARGET_USE = 'Y'
				GROUP BY REGDATE, T.TARGET_ID, T.AP_NO
			) A 
		) D
		UNION ALL
				SELECT D.AP_NO, 
				 D.TOTAL,
				 D.ERROR,
				 D.SEARCHED,
				 D.WAIT,
				 D.COMPLETE,
				 D.PAUSE,
				 D.SCANCOMP,
				 SUM(D.COMPLETE + D.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM(
			SELECT   A.AP_NO AS AP_NO,
					 A.TARGET_ID,
					 COUNT(A.TARGET_ID) AS TOTAL,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
					 END) AS WAIT,
					 COUNT(
					 CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
					 0
					 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
					 0
					 THEN 1 END ) AS COMPLETE,
					 COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
					 PAUSE,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
					 != 0
					 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
					 0 THEN 1 END) AS SCANCOMP
			FROM
				(SELECT  SG.SCHEDULE_GROUP_ID,
							SG.USER_NO,
							SG.STATUS,
							T.TARGET_ID,
							T.AP_NO,
							T.SEARCH_STATUS,
							T.SEARCH_TIME,
							T.MATCHCNT,
							SG.TYPE,
							DATE_FORMAT(T.REGDATE, '%Y%m') AS ID,
							DATE_FORMAT(T.REGDATE, '%Y년 %m월') AS REGDATE
				FROM pi_schedule_group SG, pi_targets T
				WHERE 1=1
				  AND SG.TYPE = 0
				  AND T.PLATFORM = 'Remote Access Only'
				  <if test="targetList != null">
				  	AND TARGET_ID IN (
					<foreach collection="targetList" item="item" separator=",">
				        #{item}
				    </foreach>
				    )
			      </if>
				  #AND T.TARGET_USE = 'Y'
				GROUP BY REGDATE, T.TARGET_ID, T.AP_NO
			) A 
		) D
	</select>
	
	<select id="selectDashDataPersonalPCCircle" resultType="hashmap">
		<!-- SELECT  D.AP_NO,
				D.TOTAL,
				 D.ERROR,
				 D.SEARCHED,
				 D.WAIT,
				 D.COMPLETE,
				 D.PAUSE,
				 D.SCANCOMP,
				 SUM(D.COMPLETE + D.SCANCOMP) AS PROGRESS_COMPLETE,
				 CONCAT(ROUND(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100)) AS VALUE,
				 CONCAT(ROUND(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100), '%') AS PERCENT
		FROM(
			SELECT  A.AP_NO AS AP_NO,
					A.TARGET_ID,
					 COUNT(A.TARGET_ID) AS TOTAL,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
					 END) AS WAIT,
					 COUNT(
					 CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
					 0
					 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
					 0
					 THEN 1 END ) AS COMPLETE,
					 COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
					 PAUSE,
					 COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
					 != 0
					 OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
					 0 THEN 1 END) AS SCANCOMP
			FROM
				(SELECT  SG.SCHEDULE_GROUP_ID,
							SG.USER_NO,
							SG.STATUS,
							T.TARGET_ID,
							T.AP_NO,
							T.SEARCH_STATUS,
							T.SEARCH_TIME,
							T.MATCHCNT,
							SG.TYPE,
							DATE_FORMAT(T.REGDATE, '%Y%m') AS ID,
							DATE_FORMAT(T.REGDATE, '%Y년 %m월') AS REGDATE
				FROM pi_schedule_group SG, pi_targets T
					LEFT OUTER JOIN pi_locations L ON T.TARGET_ID = L.TARGET_ID AND L.PROTOCOL = 'OneDrive'
				WHERE 1=1
				  AND SG.TYPE = 0
				  <if test="targetList != null">
				  	AND T.TARGET_ID IN (
					<foreach collection="targetList" item="item" separator=",">
				        #{item}
				    </foreach>
				    )
			      </if>
				  #AND T.TARGET_USE = 'Y'
				GROUP BY REGDATE, T.TARGET_ID, T.AP_NO
			) A 
		) D -->
		SELECT   S.AP_NO,	
			     S.TOTAL, 
				 S.COMPLETE, 
				 S.ERROR, 
				 S.SEARCHED, 
				 S.WAIT, 
				 S.PAUSE, 
				 S.SCANCOMP, 
				 SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
		SELECT  A.AP_NO AS AP_NO,
			    COUNT(A.NAME) AS TOTAL,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHING' THEN 1 END) AS SEARCHED,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1
				END) AS WAIT,
				COUNT(
				CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT =
				0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME !=
				0
				THEN 1 END ) AS COMPLETE,
				COUNT(CASE WHEN INSTR(UPPER(A.SEARCH_STATUS), 'PAUSED') > 0 THEN 1 END) AS
				PAUSE,
				COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME
				!= 0
				OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME !=
				0 THEN 1 END) AS SCANCOMP,
				(SELECT COUNT(*) FROM PI_AGENTS B WHERE B.AGENT_CONNECTED = 0) AS NOTCONNECT
				FROM PI_AP_SERVER AP, PI_TARGETS A
					# LEFT OUTER JOIN pi_locations L ON A.TARGET_ID = L.TARGET_ID AND L.PROTOCOL = 'OneDrive'
				WHERE 1=1
					AND A.AP_NO = AP.AP_NO
					AND AP.IS_SERVER != 1
					AND A.TARGET_USE = 'Y'
					<if test="targetList != null">
				  	AND A.TARGET_ID IN (
					<foreach collection="targetList" item="item" separator=",">
				        #{item}
				    </foreach>
				    )
			      </if>
				#AND A.TARGET_USE = 'Y' 
		) S
		
		
	</select>
	
	<select id="selectDashDataImple" resultType="hashmap">
		SELECT 
			ROW_NUMBER() OVER(ORDER BY RATE DESC) AS NUM,
			F.TARGET_ID,
			F.AP_NO,
			F.NAME,
			F.SERVICE_CODE,
			F.SERVICE_NM,
			F.MAX_PATH_CNT,
			F.MAX_TOTAL,
			CONCAT(ROUND(F.MAX_TOTAL / F.MIN_TOTAL * 100) , '%') AS RATE,
			F.MAX_DATE,
			F.MIN_PATH_CNT,
			F.MIN_TOTAL,
			DATE_FORMAT(F.MIN_DATE, '%Y-%m-%d') AS MIN_DATE,
			F.COMPLETED,
			DATE_FORMAT(F.DATE_COMPLETED, '%Y-%m-%d %H:%i:%s') AS DATE_COMPLETED
		FROM
			(SELECT 
				D.TARGET_ID,
				D.AP_NO,
				D.NAME,
				D.SERVICE_CODE,
				D.SERVICE_NM,
				(SELECT TP.PATH_CNT FROM pi_topcomp TP WHERE TP.REGDATE = D.MAX_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MAX_PATH_CNT,
				(SELECT TP.TOTAL FROM pi_topcomp TP WHERE TP.REGDATE = D.MAX_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MAX_TOTAL,
				DATE_FORMAT(D.MAX_DATE, '%Y-%m-%d') AS MAX_DATE,
				(SELECT TP.PATH_CNT FROM pi_topcomp TP WHERE TP.REGDATE = D.MIN_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MIN_PATH_CNT,
				(SELECT TP.TOTAL FROM pi_topcomp TP WHERE TP.REGDATE = D.MIN_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MIN_TOTAL,
				DATE_FORMAT(D.MIN_DATE, '%Y-%m-%d') AS MIN_DATE,
				(SELECT COUNT(SCHEDULE_STATUS) FROM pi_schedules S WHERE D.TARGET_ID = S.SCHEDULE_TARGET_ID AND SCHEDULE_STATUS = 'completed') AS COMPLETED,
			 	(SELECT MAX(REGDATE) FROM pi_schedules S WHERE D.TARGET_ID = S.SCHEDULE_TARGET_ID AND SCHEDULE_STATUS = 'completed') AS DATE_COMPLETED
			FROM
				(SELECT	
					T.TARGET_ID,
					T.AP_NO,
					T.NAME,
					TU.SERVICE_CODE,
					TU.SERVICE_NM,
					MAX(TC.REGDATE) AS MAX_DATE,
					MIN(TC.REGDATE) AS MIN_DATE
				FROM pi_topcomp TC, pi_targets T 
					LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
				WHERE TC.TARGET_ID = T.TARGET_ID 
				  AND TC.AP_NO = T.AP_NO
				GROUP BY TARGET_ID, AP_NO) D
		) F
		LIMIT 20
	</select>
	
	<select id="selectDashPersonalServerImple" resultType="hashmap">
		SELECT 
			ROW_NUMBER() OVER(ORDER BY RATE DESC) AS NUM,
			F.TARGET_ID,
			F.AP_NO,
			F.NAME,
			F.SERVICE_CODE,
			F.SERVICE_NM,
			F.MAX_PATH_CNT,
			F.MAX_TOTAL,
			CONCAT(ROUND(F.MAX_TOTAL / F.MIN_TOTAL * 100) , '%') AS RATE,
			DATE_FORMAT(F.MAX_DATE, '%Y-%m-%d') AS MAX_DATE,
			F.MIN_PATH_CNT,
			F.MIN_TOTAL,
			DATE_FORMAT(F.MIN_DATE, '%Y-%m-%d') AS MIN_DATE,
			F.COMPLETED,
			DATE_FORMAT(F.DATE_COMPLETED, '%Y-%m-%d %H:%i:%s') AS DATE_COMPLETED
		FROM
			(SELECT 
				D.TARGET_ID,
				D.AP_NO,
				D.NAME,
				D.SERVICE_CODE,
				D.SERVICE_NM,
				(SELECT TP.PATH_CNT FROM pi_topcomp TP WHERE TP.REGDATE = D.MAX_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MAX_PATH_CNT,
				(SELECT TP.TOTAL FROM pi_topcomp TP WHERE TP.REGDATE = D.MAX_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MAX_TOTAL,
				D.MAX_DATE,
				(SELECT TP.PATH_CNT FROM pi_topcomp TP WHERE TP.REGDATE = D.MIN_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MIN_PATH_CNT,
				(SELECT TP.TOTAL FROM pi_topcomp TP WHERE TP.REGDATE = D.MIN_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MIN_TOTAL,
				D.MIN_DATE,
				(SELECT COUNT(SCHEDULE_STATUS) FROM pi_schedules S WHERE D.TARGET_ID = S.SCHEDULE_TARGET_ID AND SCHEDULE_STATUS = 'completed') AS COMPLETED,
			 	(SELECT MAX(REGDATE) FROM pi_schedules S WHERE D.TARGET_ID = S.SCHEDULE_TARGET_ID AND SCHEDULE_STATUS = 'completed') AS DATE_COMPLETED
			FROM
				(SELECT	
					T.TARGET_ID,
					T.AP_NO,
					T.NAME,
					TU.SERVICE_CODE,
					TU.SERVICE_NM,
					MAX(TC.REGDATE) AS MAX_DATE,
					MIN(TC.REGDATE) AS MIN_DATE
				FROM pi_topcomp TC, pi_targets T 
					LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
				WHERE TC.TARGET_ID = T.TARGET_ID 
				  AND TC.AP_NO = T.AP_NO
				  
				<if test="targetList != null">
					  	AND T.TARGET_ID IN (
					<foreach collection="targetList" item="item" separator=",">
				        #{item}
				    </foreach>
				    )
			    </if>
				GROUP BY TARGET_ID, AP_NO) D
		) F
	</select>
	
	<select id="selectDashDataImpleManager" resultType="hashmap">
		SELECT 
			ROW_NUMBER() OVER(ORDER BY RATE DESC) AS NUM,
			F.USER_NO,
			F.TARGET_ID,
			F.AP_NO,
			F.NAME,
			F.SERVICE_CODE,
			F.SERVICE_NM,
			F.MAX_PATH_CNT,
			F.MAX_TOTAL,
			CONCAT(ROUND(F.MAX_TOTAL / F.MIN_TOTAL * 100) , '%') AS RATE,
			DATE_FORMAT(F.MAX_DATE, '%Y-%m-%d') AS MAX_DATE,
			F.MIN_PATH_CNT,
			F.MIN_TOTAL,
			DATE_FORMAT(F.MIN_DATE, '%Y-%m-%d') AS MIN_DATE,
			F.COMPLETED,
			DATE_FORMAT(F.DATE_COMPLETED, '%Y-%m-%d %H:%i:%s') AS DATE_COMPLETED
		FROM
			(SELECT 
				D.USER_NO,
				D.TARGET_ID,
				D.AP_NO,
				D.NAME,
				D.SERVICE_CODE,
				D.SERVICE_NM,
				(SELECT TP.PATH_CNT FROM pi_topcomp TP WHERE TP.REGDATE = D.MAX_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MAX_PATH_CNT,
				(SELECT TP.TOTAL FROM pi_topcomp TP WHERE TP.REGDATE = D.MAX_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MAX_TOTAL,
				D.MAX_DATE,
				(SELECT TP.PATH_CNT FROM pi_topcomp TP WHERE TP.REGDATE = D.MIN_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MIN_PATH_CNT,
				(SELECT TP.TOTAL FROM pi_topcomp TP WHERE TP.REGDATE = D.MIN_DATE AND TP.TARGET_ID = D.TARGET_ID AND TP.AP_NO = D.AP_NO) AS MIN_TOTAL,
				D.MIN_DATE,
				(SELECT COUNT(SCHEDULE_STATUS) FROM pi_schedules S WHERE D.TARGET_ID = S.SCHEDULE_TARGET_ID AND SCHEDULE_STATUS = 'completed') AS COMPLETED,
			 	(SELECT MAX(REGDATE) FROM pi_schedules S WHERE D.TARGET_ID = S.SCHEDULE_TARGET_ID AND SCHEDULE_STATUS = 'completed') AS DATE_COMPLETED
			  FROM
				(SELECT	
					TU.USER_NO,
					T.TARGET_ID,
					T.AP_NO,
					T.NAME,
					TU.SERVICE_CODE,
					TU.SERVICE_NM,
					MAX(TC.REGDATE) AS MAX_DATE,
					MIN(TC.REGDATE) AS MIN_DATE
				 FROM pi_ap_server AP, pi_topcomp TC, pi_targets T 
					LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
				 WHERE TC.TARGET_ID = T.TARGET_ID 
				  AND T.AP_NO = AP.AP_NO
				  AND AP.IS_SERVER != 1
				  AND T.TARGET_ID = TU.TARGET_ID
				  AND T.AP_NO = TU.AP_NO
				  <if test="user_grade != 9">
			  		AND (TU.USER_NO = '${user_no}' OR TU.SERVICE_USER = '${user_no}' OR TU.INFRA_MANAGER = '${user_no}')
			      </if>
				GROUP BY TARGET_ID, AP_NO) D
			) F
	</select>
	
	<select id="selectDashPCJstreePopup" resultType="hashmap">
			SELECT TU.TARGET_ID,
				T.NAME AS FULL_NAME,
				T.TARGET_USE,
				SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
				SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
				SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
				T.PLATFORM,
			   IF(FROM_UNIXTIME(T.SEARCH_TIME, '%Y-%m-%d %H:%i') >= DATE_FORMAT('2000-01-01 00:00', '%Y-%m-%d %H:%i'), FROM_UNIXTIME(T.SEARCH_TIME, '%Y-%m-%d %H:%i'), '') AS SEARCHENDTIME,
			   IFNULL(A.AGENT_CONNECTED_IP, '') AS AGENT_CONNECTED_IP,
			   IFNULL(A.AGENT_CONNECTED, 1) AS AGENT_CONNECTED,
			   IFNULL(A.AGENT_PLATFORM, '') AS AGENT_PLATFORM
			FROM pi_ap_server AP, pi_targets T
				LEFT OUTER JOIN pi_target_user TU ON T.TARGET_ID = TU.TARGET_ID AND T.AP_NO = TU.AP_NO
				LEFT OUTER JOIN pi_agents A ON T.NAME = A.AGENT_NAME AND T.AP_NO = A.AP_NO
			WHERE 1=1
				AND TU.USER_NO = #{target_id}
				AND TU.AP_NO = AP.AP_NO
				AND AP.IS_SERVER != 1
				AND T.TARGET_USE = 'Y'
	</select>
	
	<select id="selectSystemCurrentProgressPC" resultType="hashmap">
		SELECT S.TOTAL, SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE, 
				IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE, 
				CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT, PROTOCOL 
		FROM (
				SELECT D.AP_NO, COUNT(D.NAME) AS TOTAL, COUNT(D.COMPLETE) AS COMPLETE, COUNT(D.SCANCOMP) AS SCANCOMP, 
						PROTOCOL FROM (SELECT A.AP_NO AS AP_NO, NAME, CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT = 0 
						  OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME != 0 THEN 1 END AS COMPLETE, 
						CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 
						  OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 THEN 1 END AS SCANCOMP, L.PROTOCOL 
				FROM pi_locations L, pi_ap_server AP, pi_targets A
					LEFT OUTER JOIN pi_schedule_targets ST ON A.TARGET_ID = ST.TARGET_ID
					LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND A.AP_NO = SG.TYPE
				WHERE 1=1 
					AND A.TARGET_ID = L.TARGET_ID 
					AND L.PROTOCOL != 'onedrive'
					AND A.TARGET_USE = 'Y'
					<if test="fromDate != null and toDate != null">  
					  AND A.TARGET_ID IN (
							SELECT ST.TARGET_ID 
							FROM pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
								AND NOT SG.TYPE = 0
								   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							GROUP BY ST.TARGET_ID, ST.AP_NO
					   )
		    	  </if>
					AND A.AP_NO = AP.AP_NO
					AND AP.IS_SERVER != 1
				GROUP BY A.NAME, A.TARGET_ID
				)D 
			)S
	</select>
	
	<select id="selectSystemCurrentProgressOneDrive" resultType="hashmap"> 
		<!-- SELECT IFNULL(S.TOTAL, 0) AS TOTAL, IFNULL(S.COMPLETE, 0) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
			SELECT SUM(IF(D.STATUS='completed', 1, 0)) AS COMPLETE,
					 COUNT(D.TARGET_ID) AS TOTAL
			FROM(SELECT T.TARGET_ID, L.LOCATION_ID, L.PATH, SL.STATUS, FROM_UNIXTIME(SL.STARTED), T.NAME
					FROM pi_targets T, pi_locations L
						LEFT OUTER JOIN pi_scheduled_location SL ON L.TARGET_ID = SL.TARGET_ID AND L.LOCATION_ID = SL.LOCATION_ID
					WHERE T.AP_NO != 0
						AND T.TARGET_ID = L.TARGET_ID
						AND L.PROTOCOL = 'onedrive'
						<if test="fromDate != null and toDate != null">  
						  AND T.TARGET_ID IN (
								SELECT ST.TARGET_ID 
								FROM pi_schedule_group SG, pi_schedule_targets ST
								WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
									AND NOT SG.TYPE = 0
									   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
								GROUP BY ST.TARGET_ID, ST.AP_NO
						   )
			    	   </if>
					)D
		)S -->
		SELECT IFNULL(S.TOTAL, 0) AS TOTAL, IFNULL(S.COMPLETE, 0) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
	FROM (
			SELECT SUM(IF(D.SCHEDULE_STATUS='completed', 1, 0)) AS COMPLETE,
					 COUNT(D.TARGET_ID) AS TOTAL
			FROM (
				SELECT ST.TARGET_ID,
						 ST.AP_NO,
						 ST.LOCATION_ID,
						 ST.REGDATE,
						 S.SCHEDULE_STATUS,
						 ST.STATUS,
						 S.SCHEDULE_TARGET_NAME
				FROM pi_schedule_targets ST
					LEFT OUTER JOIN pi_locations L ON L.TARGET_ID = ST.TARGET_ID AND L.LOCATION_ID = ST.LOCATION_ID 
					LEFT OUTER JOIN pi_schedules S ON S.SCHEDULE_TARGET_ID = ST.TARGET_ID AND S.AP_NO = ST.AP_NO AND ST.RECON_SCHEDULE_ID = S.SCHEDULE_ID
				WHERE 1=1
					AND L.PROTOCOL = 'onedrive'
					<if test="fromDate != null and toDate != null"> 
					AND ST.TARGET_ID IN (
							SELECT ST.TARGET_ID 
							FROM pi_schedule_group SG, pi_schedule_targets ST
							WHERE SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID
								AND NOT SG.TYPE = 0
								   	AND SG.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59')
							GROUP BY ST.TARGET_ID, ST.AP_NO
											   )
					</if>
					<!-- AND ST.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59') -->
				GROUP BY ST.TARGET_ID, ST.AP_NO, ST.LOCATION_ID, DATE_FORMAT(ST.REGDATE, '%Y-%m-%d')
				ORDER BY REGDATE
				 )D
			)S
	</select>
	
	<select id="selectDashPersonalProgressPc" resultType="hashmap">
		<!-- SELECT D.TOTAL, SUM(D.COMPLETE + D.SCANCOMP) AS PROGRESS_COMPLETE, 
				IFNULL(TRUNCATE(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100, 1), 0.0) AS VALUE, 
				CONCAT(IFNULL(TRUNCATE(SUM(D.COMPLETE + D.SCANCOMP) / D.TOTAL * 100, 1), 0.0), '%') AS PERCENT 
		FROM( 
				SELECT A.AP_NO AS AP_NO, A.TARGET_ID, COUNT(A.TARGET_ID) AS TOTAL, 
						COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT = 0 
						  OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME != 0 THEN 1 END ) AS COMPLETE, 
						COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 
						  OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 THEN 1 END) AS SCANCOMP 
				FROM (
						SELECT SG.SCHEDULE_GROUP_ID, SG.USER_NO, SG.STATUS, 
								T.TARGET_ID, T.AP_NO, T.SEARCH_STATUS, T.SEARCH_TIME, 
								T.MATCHCNT, DATE_FORMAT(T.REGDATE, '%Y년 %m월') AS REGDATE
						FROM pi_schedule_group SG, pi_targets T, pi_locations L 
						WHERE 1=1 
							AND SG.TYPE = T.AP_NO
							AND T.AP_NO != 0 
							AND T.TARGET_ID = L.TARGET_ID 
							AND L.PROTOCOL != 'onedrive'
							<if test="targetList != null">
							AND T.TARGET_ID IN (
							<foreach collection="targetList" item="item" separator=","> #{item} </foreach>
							)
							</if>
							#AND T.TARGET_USE = 'Y' 
						GROUP BY REGDATE, T.TARGET_ID, T.AP_NO 
						) A 
				) D -->
		 	SELECT S.TOTAL, SUM(S.COMPLETE + S.SCANCOMP) AS PROGRESS_COMPLETE, 
				IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0) AS VALUE, 
				CONCAT(IFNULL(TRUNCATE(SUM(S.COMPLETE + S.SCANCOMP) / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT, PROTOCOL 
		FROM (
				SELECT D.AP_NO, COUNT(D.NAME) AS TOTAL, COUNT(D.COMPLETE) AS COMPLETE, COUNT(D.SCANCOMP) AS SCANCOMP, 
						PROTOCOL FROM (SELECT A.AP_NO AS AP_NO, NAME, CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT = 0 
						  OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT = 0 AND A.SEARCH_TIME != 0 THEN 1 END AS COMPLETE, 
						CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 
						  OR A.SEARCH_STATUS = 'SEARCHED' AND A.MATCHCNT != 0 AND A.SEARCH_TIME != 0 THEN 1 END AS SCANCOMP, L.PROTOCOL 
				FROM pi_locations L, pi_ap_server AP, pi_targets A
					LEFT OUTER JOIN pi_schedule_targets ST ON A.TARGET_ID = ST.TARGET_ID
					LEFT OUTER JOIN pi_schedule_group SG ON SG.SCHEDULE_GROUP_ID = ST.SCHEDULE_GROUP_ID AND A.AP_NO = SG.TYPE
				WHERE 1=1 
					AND A.TARGET_ID = L.TARGET_ID 
					AND L.PROTOCOL != 'onedrive'
					AND A.TARGET_USE = 'Y'
					<if test="targetList != null">
						AND A.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=","> #{item} </foreach>
						)
					</if>
					AND A.AP_NO = AP.AP_NO
					AND AP.IS_SERVER != 1
				GROUP BY A.NAME, A.TARGET_ID
				)D 
			)S
	</select>
		
	<select id="selectDashPersonalProgressOneDrive" resultType="hashmap">
		<!-- SELECT IFNULL(S.TOTAL, 0) AS TOTAL, IFNULL(S.COMPLETE, 0) AS PROGRESS_COMPLETE,
				 IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0) AS VALUE,
				 CONCAT(IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
			SELECT SUM(IF(D.STATUS='completed', 1, 0)) AS COMPLETE,
					 COUNT(D.TARGET_ID) AS TOTAL
			FROM(SELECT T.TARGET_ID, L.LOCATION_ID, L.PATH, SL.STATUS, FROM_UNIXTIME(SL.STARTED), T.NAME
					FROM pi_targets T, pi_locations L
						LEFT OUTER JOIN pi_scheduled_location SL ON L.TARGET_ID = SL.TARGET_ID AND L.LOCATION_ID = SL.LOCATION_ID
					WHERE T.AP_NO != 0
						AND T.TARGET_ID = L.TARGET_ID
						AND L.PROTOCOL = 'onedrive'
						<if test="targetList != null">
							AND T.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=","> #{item} </foreach>
						)
						</if>
					)D
		)S -->
		
		SELECT IFNULL(S.TOTAL, 0) AS TOTAL, IFNULL(S.COMPLETE, 0) AS PROGRESS_COMPLETE,
			 IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0) AS VALUE,
			 CONCAT(IFNULL(TRUNCATE(S.COMPLETE / S.TOTAL * 100, 1), 0.0), '%') AS PERCENT
		FROM (
				SELECT SUM(IF(D.SCHEDULE_STATUS='completed', 1, 0)) AS COMPLETE,
						 COUNT(D.TARGET_ID) AS TOTAL
				FROM (
					SELECT ST.TARGET_ID,
							 ST.AP_NO,
							 ST.LOCATION_ID,
							 ST.REGDATE,
							 S.SCHEDULE_STATUS,
							 ST.STATUS,
							 S.SCHEDULE_TARGET_NAME
					FROM pi_schedule_targets ST
						LEFT OUTER JOIN pi_locations L ON L.TARGET_ID = ST.TARGET_ID AND L.LOCATION_ID = ST.LOCATION_ID 
						LEFT OUTER JOIN pi_schedules S ON S.SCHEDULE_TARGET_ID = ST.TARGET_ID AND S.AP_NO = ST.AP_NO AND ST.RECON_SCHEDULE_ID = S.SCHEDULE_ID
					WHERE 1=1
						AND L.PROTOCOL = 'onedrive'
						<if test="targetList != null">
							AND ST.TARGET_ID IN (
						<foreach collection="targetList" item="item" separator=","> #{item} </foreach>
						)
						</if>
						<if test="date != null"> 
							AND DATE_FORMAT(ST.REGDATE, '%Y년 %m월') = #{date}
						</if>
					<!-- AND ST.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate} ,' 23:59:59') -->
					GROUP BY ST.TARGET_ID, ST.AP_NO, ST.LOCATION_ID, DATE_FORMAT(ST.REGDATE, '%Y-%m-%d')
					ORDER BY REGDATE
					 )D
				)S
	</select>
	
</mapper>