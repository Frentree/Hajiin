<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.org.iopts.report.dao.piSummaryDAO"> 
    
    <select id="searchSummaryList" parameterType="hashmap" resultType="hashmap">
        	SELECT DISTINCT 
    		A.GROUP_ID, 	
		    A.TARGET_ID, 
			A.HASH_ID, 
			A.ACCOUNT, 
			A.PLATFORM, 
			A.NAME AS TARGET_NAME, 
			A.PATH, # 경로
			CONCAT ('"', A.PATH, '"') AS PATH2,
			A.INSA_CODE,
			IFNULL((CASE WHEN A.AP_NO = 0 THEN A.GROUP_NAME
				  WHEN A.AP_NO != 0 THEN TU.TEAM_NAME END), '') AS OFFICE_NM,
			A.COMMENTS, #코멘트
			A.OWNER AS USER_ID, # 사번
			A.AP_NO,
			(CASE WHEN TU.OWNER_CNT IS NULL 
					THEN 0
					ELSE TU.OWNER_CNT
			END ) AS OWNER_CNT,

			IFNULL(A.USER_NAME, '') AS USER_NAME,				# 담당자 명
			TYPE1, # 주민번호
			TYPE2, # 외국인번호
			TYPE3, # 여권번호
			TYPE4, # 운전면허번호
			TYPE5, # 카드번호
			TYPE6, # 계좌번호
			TYPE7, # 전화번호
			TYPE8, # 휴대폰번호
			(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE5 + A.TYPE6 + A.TYPE7 + A.TYPE8) AS TYPE,		# 총개수

			IFNULL(A.CREDATE, '') AS CREDATE, # 검출일
			A.REGDATE, # 업데이트일
			DP.USER_NO AS ACCOUNT_USER_NO, # 기안자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = DP.USER_NO LIMIT 1), '') AS ACCOUNT_USER_NM,	# 기안자
			<!-- IFNULL(DATE_FORMAT(A.REGDATE, '%Y-%m-%d %H:%i:%s'), '') AS D_P_C_G_REGDATE, # 기안일 -->
			IFNULL((CASE WHEN DP.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(DP.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END), '') AS D_P_C_G_REGDATE,
			DP.OKUSER_NO AS OKUSER_NO,	# 결재자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = DP.OKUSER_NO LIMIT 1), '') AS OK_ACCOUNT_USER_NM,	# 결재자
			(CASE WHEN DP.APPROVAL_STATUS='E' THEN '승인' WHEN DP.APPROVAL_STATUS ='D' THEN '반려' WHEN DP.APPROVAL_STATUS ='W' THEN '대기' ELSE '' END) AS APPROVAL_REGULT,
			DP.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
			IFNULL(A.IP, '') AS IP, 
			IFNULL(A.DELDATE, '') AS DELDATE, 
			(CASE WHEN DP.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN DP.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END) AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
			(CASE WHEN (SELECT 'DMZ' FROM pi_dmz DMZ WHERE DMZ.DMZ_IP = A.IP LIMIT 1) = 'DMZ' THEN 'DMZ' ELSE 'NOTDMZ' END) AS DMZ,
			(SELECT H.REASON FROM PI_DATA_PROCESSING_GROUP G, PI_DATA_PROCESSING_CHARGE_GROUP H 
				WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID) AS D_P_C_G_REASON,	
			IFNULL((SELECT PROCESSING_FLAG_NAME FROM PI_DATA_PROCESSING_FLAG I WHERE I.PROCESSING_FLAG = DP.PROCESSING_FLAG), '') AS PROCESSING_FLAG_NAME,				# 조치방법
			(SELECT NEXT_DATE_REMEDI FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX) AS D_P_G_NEXT_DATE_REMEDI,		
			(SELECT G.NOTE FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX) AS NOTE,
			<!-- IFNULL((CASE WHEN A.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(A.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END), '') AS OKDATE -->
			IFNULL((SELECT DATE_FORMAT(H.OKDATE, '%Y-%m-%d %H:%i:%s') FROM pi_data_processing_group G, PI_DATA_PROCESSING_CHARGE_GROUP H
				WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID), '') AS OKDATE
		FROM (SELECT
			F.GROUP_ID, F.HASH_ID, F.PATH, F.FID, F.OWNER, F.TARGET_ID, F.ACCOUNT, 
			T.COMMENTS,
			T.NAME,
			G.INSA_CODE,
			(SELECT TG.NAME FROM PI_TARGET_GROUP TG WHERE AI.GROUP_ID = TG.IDX) AS GROUP_NAME,
			T.AP_NO,
			T.PLATFORM,
			(SELECT AG.AGENT_CONNECTED_IP FROM pi_agents AG WHERE T.NAME = AG.AGENT_NAME LIMIT 1) AS IP,
			U.USER_NAME AS USER_NAME,
			DATE_FORMAT(F.CREDATE, '%Y-%m-%d %H:%i:%s') AS CREDATE,
			DATE_FORMAT(F.REGDATE, '%Y-%m-%d %H:%i:%s') AS REGDATE,
			DATE_FORMAT(F.DELDATE, '%Y-%m-%d %H:%i:%s') AS DELDATE,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE2,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE3, 
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE4,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE5,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'VISA') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MAESTRO') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DINERS CLUB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'JCB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'LASER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'CHINA UNION PAY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
	  		SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DISCOVER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'TROY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MASTERCARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE6,
		   <!--  SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN LOCAL PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7, -->
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'EMAIL') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN MOBILE PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8
		FROM (SELECT 
				SL.TARGET_ID, 
				SL.AP_NO
			  FROM pi_scheduled_location SL
			  WHERE SL.STATUS IN ('completed', 'stopped', 'interrupted')
			  	<if test="SCH_DATE == 0">
					AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d') BETWEEN CONCAT(#{SCH_FROM_CREDATE}) AND CONCAT(#{SCH_TO_CREDATE})
					<!-- AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d %h:%i:%s') BETWEEN CONCAT(#{SCH_FROM_CREDATE}, '00:00:00') AND CONCAT(#{SCH_TO_CREDATE},'23:59:59') -->
				</if>
				<!-- <if test="SCH_DATE == 1">
					AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d') BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE}) AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE})
					AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d %h:%i:%s') BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE}, '00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},'23:59:59')
				</if> -->
			  GROUP BY SL.TARGET_ID, SL.AP_NO) SL,
				pi_find F, pi_targets T
			LEFT OUTER JOIN PI_ACCOUNT_INFO AI ON T.NAME = AI.HOST_NM
			LEFT OUTER JOIN PI_TARGET_USER TU	ON TU.TARGET_ID = T.TARGET_ID AND T.AP_NO = TU.AP_NO
			LEFT OUTER JOIN PI_USER U 			ON U.USER_NO = TU.USER_NO
			LEFT OUTER JOIN PI_GROUP G			ON U.INSA_CODE = G.INSA_CODE
			, pi_summary S
		WHERE SL.TARGET_ID = F.TARGET_ID
			AND SL.AP_NO = F.AP_NO
		  	AND F.HASH_ID = S.OBJECT_ID
			AND SL.TARGET_ID = T.TARGET_ID
			AND SL.AP_NO = T.AP_NO
			AND SL.TARGET_ID = S.TARGET_ID
			AND SL.AP_NO = S.AP_NO
		  <if test="SCH_DATE == 0">
		  	AND F.CREDATE BETWEEN CONCAT(#{SCH_FROM_CREDATE},' 00:00:00') AND CONCAT(#{SCH_TO_CREDATE},' 23:59:59')		# 기존 조회조건 : 검출일
		  </if>	
		  <if test="SCH_GROUP != null and SCH_GROUP != ''">
			AND (SELECT TG.NAME FROM PI_TARGET_GROUP TG WHERE ST.GROUPID = TG.IDX) = #{SCH_GROUP}
		  </if>
		  <if test="SCH_TARGET_ID != null and SCH_TARGET_ID != ''">
			AND T.TARGET_ID = #{SCH_TARGET_ID}
		  </if>	
			AND T.AP_NO = 0
			<!-- <if test= "AP_NO == 1">
				AND G.TEAM_NAME = #{SCH_GROUP}
				AND T.AP_NO != 0			
			</if> -->
		<!-- <if test="SCH_OBJECT != null and SCH_OBJECT != '' and SCH_OBJECT == 'group' ">
			<if test="GROUP_ID != null and GROUP_ID != ''">
				AND T.TARGET_ID IN (
					with recursive cte AS ( 
					SELECT 
						idx, 
						NAME, 
						up_idx, 
						1 AS LEVEL 
					from pi_target_group 
					where idx = 64 
					union ALL 
						SELECT 
							p.idx, 
							p.name,
							p.up_idx, 
							1+LEVEL as LEVEL 
						from pi_target_group p 
						INNER join cte on p.up_idx = cte.idx 
					)
					select T.TARGET_ID
					from cte, pi_targets t
					WHERE cte.idx = t.group_idx
					AND t.target_use = 'Y'
				)
			</if>
		</if>
		<if test="SCH_OBJECT != null or SCH_OBJECT != '' or SCH_OBJECT == 'host' ">
			<if test="SCH_TARGET != null and SCH_TARGET != ''">
				AND T.NAME LIKE CONCAT('%',#{SCH_TARGET},'%')			# 기존 조회조건 : 호스트
			</if>
		</if>
		<if test="SCH_PATH != null and SCH_PATH != ''">
			AND F.PATH LIKE CONCAT('%',#{SCH_PATH},'%')				# 기존 조회조건 : 경로명
		</if>
		<if test="SCH_OWNER != null and SCH_OWNER != ''">
			AND F.OWNER LIKE CONCAT('%',#{SCH_OWNER},'%')			# 추가 조회조건 : 담당자
		</if>
		<if test="SCH_OFFICE_CODE != null and SCH_OFFICE_CODE != ''">
			AND (SELECT U.INSA_CODE FROM PI_USER U WHERE U.USER_NO = F.OWNER) LIKE CONCAT('%',#{SCH_OFFICE_CODE},'%')		# 추가 조회조건 : 팀명	
		</if> -->	
		GROUP BY F.HASH_ID) A 
			LEFT OUTER JOIN pi_data_processing DP ON A.HASH_ID = DP.HASH_ID AND A.TARGET_ID = DP.TARGET_ID
			LEFT OUTER JOIN (SELECT 
					TU.TARGET_ID, TU.USER_NO, COUNT(TU.USER_NO) AS OWNER_CNT, U.USER_NAME, G.TEAM_NAME, TU.AP_NO
				FROM PI_TARGET_USER TU
				LEFT OUTER JOIN PI_USER U ON TU.USER_NO = U.USER_NO
				LEFT OUTER JOIN PI_GROUP G ON G.INSA_CODE = U.INSA_CODE
				GROUP BY TU.TARGET_ID
			) TU ON TU.TARGET_ID = A.TARGET_ID AND TU.AP_NO = A.AP_NO
		WHERE 1= 1
		<if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
			<if test="SCH_PROCESSING_FLAG != '-1'">
				AND DP.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
			</if>
			<if test="SCH_PROCESSING_FLAG == '-1'">
				AND DP.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
			</if>
		</if>
		<!-- <if test="SCH_DATE == 1">
			AND DP.REGDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')		# 추가 조회조건 : 기안일		조회조건 변경: 문서생성일->기안일 (프렌트리 전준현K 2019.10.15)
		</if> -->
		HAVING TYPE != 0
			
		ORDER BY A.TARGET_ID, A.PATH
<!--     	SELECT DISTINCT 
    		A.GROUP_ID, 	
		    A.TARGET_ID, 
			A.HASH_ID, 
			A.ACCOUNT, 
			A.PLATFORM, 
			A.NAME AS TARGET_NAME, 
			A.PATH, # 경로
			A.COMMENTS, #코멘트
			A.OWNER AS USER_ID, # 사번
			(SELECT G.TEAM_NAME FROM PI_USER U, PI_GROUP G WHERE U.INSA_CODE=G.INSA_CODE AND U.USER_NO = A.OWNER) AS OFFICE_NM, # 팀명
			(SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = A.OWNER) AS USER_NM, # 담당자명
			TYPE1, # 주민번호
			TYPE2, # 외국인번호
			TYPE3, # 여권번호
			TYPE4, # 운전면허번호
			TYPE5, # 카드번호
			TYPE6, # 계좌번호
			TYPE7, # 전화번호
			TYPE8, # 휴대폰번호
			(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE5 + A.TYPE6 + A.TYPE7 + A.TYPE8) AS TYPE,		# 총개수
			<if test="SCH_DMZ_SELECT == 1">
				TYPE5, # 카드번호			 # 카드번호&계좌번호 제외 요청에 따른 주석 shlee_20200923
				TYPE6, # 계좌번호
				(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE6 + A.TYPE5) AS TYPE,		# 총개수
			</if>
			<if test="SCH_DMZ_SELECT == 0">
				'N/A' AS TYPE6,		# 카드번호
				'N/A' AS TYPE5,		# 계좌번호
				(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4) AS TYPE,		# 총개수
			</if>
			
			A.CREDATE, # 검출일
			A.REGDATE, # 업데이트일
			DP.USER_NO AS ACCOUNT_USER_NO, # 기안자NO
			(SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = DP.USER_NO LIMIT 1) AS ACCOUNT_USER_NM,	# 기안자
			DATE_FORMAT(DP.REGDATE, '%Y-%m-%d %H:%i:%s') AS D_P_C_G_REGDATE, # 기안일
			DP.OKUSER_NO AS OKUSER_NO,	# 결재자NO
			(SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = DP.OKUSER_NO LIMIT 1) AS OK_ACCOUNT_USER_NM,	# 결재자
			(CASE WHEN DP.APPROVAL_STATUS='E' THEN '승인' WHEN DP.APPROVAL_STATUS ='D' THEN '반려' WHEN DP.APPROVAL_STATUS ='W' THEN '대기' ELSE '' END) AS APPROVAL_REGULT,
			DP.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
			A.IP, 
			A.DELDATE, 
			A.USER_NAME,
			(CASE WHEN DP.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN DP.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END) AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
			(CASE WHEN (SELECT 'DMZ' FROM pi_dmz DMZ WHERE DMZ.DMZ_IP = A.IP) = 'DMZ' THEN 'DMZ' ELSE 'NOTDMZ' END) AS DMZ,
			(SELECT H.REASON FROM PI_DATA_PROCESSING_GROUP G, PI_DATA_PROCESSING_CHARGE_GROUP H 
				WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID) AS D_P_C_G_REASON,	
			(SELECT PROCESSING_FLAG_NAME FROM PI_DATA_PROCESSING_FLAG I WHERE I.PROCESSING_FLAG = DP.PROCESSING_FLAG) AS PROCESSING_FLAG_NAME,				# 조치방법
			(SELECT NEXT_DATE_REMEDI FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX) AS D_P_G_NEXT_DATE_REMEDI,		
			(SELECT G.NOTE FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX) AS NOTE,
			(CASE WHEN DP.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(DP.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END) AS OKDATE
		FROM (SELECT
			F.GROUP_ID, F.HASH_ID, F.PATH, F.FID, F.OWNER, F.TARGET_ID, F.ACCOUNT, 
			T.COMMENTS,
			T.NAME,
			T.PLATFORM,
			(SELECT AG.AGENT_CONNECTED_IP FROM pi_agents AG WHERE T.NAME = AG.AGENT_NAME LIMIT 1) AS IP,
			(SELECT U.USER_NAME FROM pi_user U WHERE U.USER_NO = F.OWNER) AS USER_NAME,
			DATE_FORMAT(F.CREDATE, '%Y-%m-%d %H:%i:%s') AS CREDATE,
			DATE_FORMAT(F.REGDATE, '%Y-%m-%d %H:%i:%s') AS REGDATE,
			DATE_FORMAT(F.DELDATE, '%Y-%m-%d %H:%i:%s') AS DELDATE,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE2,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE3, 
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE4,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE5,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'VISA') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MAESTRO') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DINERS CLUB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'JCB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'LASER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'CHINA UNION PAY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
	  		SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DISCOVER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'TROY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MASTERCARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE6,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN LOCAL PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN MOBILE PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'EMAIL') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8
		FROM pi_find F, pi_targets T, pi_summary S
		WHERE F.TARGET_ID = T.TARGET_ID
		  AND F.TARGET_ID = S.TARGET_ID
		  AND F.HASH_ID = S.OBJECT_ID
		  AND F.CREDATE BETWEEN CONCAT(#{SCH_FROM_CREDATE},' 00:00:00') AND CONCAT(#{SCH_TO_CREDATE},' 23:59:59')		# 기존 조회조건 : 검출일	
		<if test="SCH_TARGET != null and SCH_TARGET != ''">
			AND T.NAME LIKE CONCAT('%',#{SCH_TARGET},'%')			# 기존 조회조건 : 호스트
		</if>
		<if test="SCH_PATH != null and SCH_PATH != ''">
			AND F.PATH LIKE CONCAT('%',#{SCH_PATH},'%')				# 기존 조회조건 : 경로명
		</if>
		<if test="SCH_OWNER != null and SCH_OWNER != ''">
			AND F.OWNER LIKE CONCAT('%',#{SCH_OWNER},'%')			# 추가 조회조건 : 담당자
		</if>
		<if test="SCH_OFFICE_CODE != null and SCH_OFFICE_CODE != ''">
			AND (SELECT U.INSA_CODE FROM PI_USER U WHERE U.USER_NO = F.OWNER) LIKE CONCAT('%',#{SCH_OFFICE_CODE},'%')		# 추가 조회조건 : 팀명	
		</if>	
		GROUP BY F.HASH_ID) A LEFT OUTER JOIN pi_data_processing DP ON A.HASH_ID = DP.HASH_ID AND A.TARGET_ID = DP.TARGET_ID
		WHERE 1= 1
		<if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
			<if test="SCH_PROCESSING_FLAG != '-1'">
				AND DP.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
			</if>
			<if test="SCH_PROCESSING_FLAG == '-1'">
				AND DP.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
			</if>
		</if>
		<if test='SCH_D_P_C_G_REGDATE_CHK == "Y"'>
			AND DP.REGDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')		# 추가 조회조건 : 기안일		조회조건 변경: 문서생성일->기안일 (프렌트리 전준현K 2019.10.15)
		</if>	
		HAVING TYPE != 0
		<if test="SCH_DMZ_SELECT == 1">
			AND DMZ = 'DMZ'
		</if>
		<if test="SCH_DMZ_SELECT == 0">
			AND DMZ = 'NOTDMZ'
		</if>
			
		ORDER BY A.TARGET_ID, A.PATH -->
    
    	<!-- SELECT A.GROUP_ID,
				A.TARGET_ID,
				A.HASH_ID,
				A.ACCOUNT,
				A.PLATFORM,							# Os
				A.TARGET_NAME,						# 호스트
				A.PATH,								# 경로
				(SELECT G.TEAM_NAME FROM PI_USER U, PI_GROUP G WHERE U.INSA_CODE=G.INSA_CODE AND U.USER_NO = A.OWNER) AS OFFICE_NM,						# 팀명
				A.OWNER AS USER_ID,							# 사번
				(SELECT U.USER_NAME FROM PI_USER U, PI_GROUP G WHERE U.INSA_CODE=G.INSA_CODE AND U.USER_NO = A.OWNER) AS USER_NM,							# 담당자명
				SUM(A.TYPE1)		AS TYPE1,		# 주민번호
				SUM(A.TYPE2)		AS TYPE2,		# 외국인번호
				SUM(A.TYPE3)		AS TYPE3,		# 여권번호
				SUM(A.TYPE4)		AS TYPE4,		# 운전번호
				<if test="SCH_DMZ_SELECT == 1">
					SUM(A.TYPE6)		AS TYPE6,		# 카드번호
					SUM(A.TYPE5)		AS TYPE5,		# 계좌번호
					SUM(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE6 + A.TYPE5) AS TYPE,		# 총개수
				</if>
				<if test="SCH_DMZ_SELECT == 0">
					'N/A' AS TYPE6,		# 카드번호
					'N/A' AS TYPE5,		# 계좌번호
					SUM(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4) AS TYPE,		# 총개수
				</if>
				A.CREDATE,							# 검출일
				A.DELDATE,							# 삭제일
				A.REGDATE AS D_P_C_G_REGDATE,					# 기안일
				A.USER_NO AS ACCOUNT_USER_NO,		# 기안자NO
				(SELECT USER_NAME FROM PI_USER U WHERE U.USER_NO = A.USER_NO LIMIT 1) AS ACCOUNT_USER_NM,	# 기안자
				A.OKDATE 	AS OKDATE,			# 결재일
				A.OKUSER_NO	AS OKUSER_NO,	# 결재자NO
				(SELECT USER_NAME FROM PI_USER U WHERE U.USER_NO = A.OKUSER_NO LIMIT 1) AS OK_ACCOUNT_USER_NM,  # 결재자
				A.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
				(CASE WHEN A.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN A.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END) AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
				(SELECT H.REASON FROM PI_DATA_PROCESSING_GROUP G, PI_DATA_PROCESSING_CHARGE_GROUP H WHERE G.IDX = A.PRO_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID) AS D_P_C_G_REASON,					# 메모내용(문서 메모내용)
				(SELECT PROCESSING_FLAG_NAME FROM PI_DATA_PROCESSING_FLAG I WHERE I.PROCESSING_FLAG = A.PROCESSING_FLAG),				# 조치방법
				(SELECT NEXT_DATE_REMEDI FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = A.PRO_IDX) AS D_P_G_NEXT_DATE_REMEDI,			# 조치예정일
				(SELECT G.NOTE FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = A.PRO_IDX)
		  FROM (
				SELECT A.GROUP_ID,
						A.TARGET_ID,
						A.HASH_ID,
						C.NAME		AS TARGET_NAME,
						D.DMZ_IP,
						C.PLATFORM,
						A.PATH,
						A.OWNER,
						DATE_FORMAT(A.CREDATE, '%Y-%m-%d %H:%i:%S') AS CREDATE,
						DATE_FORMAT(A.DELDATE, '%Y-%m-%d %H:%i:%S') AS DELDATE,
						A.ACCOUNT,
						B.PROCESSING_FLAG,
						DATE_FORMAT(B.REGDATE, '%Y-%m-%d %H:%i:%S') AS REGDATE,
						DATE_FORMAT(B.OKDATE, '%Y-%m-%d %H:%i:%S') AS OKDATE,
						B.USER_NO,
						B.OKUSER_NO,
						B.APPROVAL_STATUS,
						B.DATA_PROCESSING_GROUP_IDX AS PRO_IDX,
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN RRN') 					> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE1,		# 주민등록번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER')	> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE4,		# 운전면허번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') 		> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE2,		# 외국인등록번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN PASSPORT') 				> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE3,		# 여권번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'ACCOUNT NUMBER') 						> 0 THEN F.MATCH_COUNT ELSE 0 END AS TYPE5,		# 계좌번호
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'AMERICAN EXPRESS') 					> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'MAESTRO') 								> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'VISA') 								> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'PRIVATE LABEL CARD') 					> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'DINERS CLUB') 							> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'JCB') 									> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'LASER') 								> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'MASTER') 								> 0 THEN F.MATCH_COUNT ELSE 0 END AS TYPE6		# 신용카드
				FROM  PI_FIND A LEFT OUTER JOIN PI_DATA_PROCESSING B ON A.GROUP_ID = B.GROUP_ID AND A.TARGET_ID = B.TARGET_ID AND A.HASH_ID = B.HASH_ID
								LEFT OUTER JOIN PI_ACCOUNT_INFO E ON A.OWNER = E.USER_ID AND A.ACCOUNT = E.ACCOUNT
								LEFT OUTER JOIN PI_TARGETS C ON A.GROUP_ID	= C.GROUP_ID AND A.TARGET_ID	= C.TARGET_ID
								LEFT OUTER JOIN PI_AGENTS AG ON C.NAME = AG.AGENT_NAME 
								LEFT OUTER JOIN PI_DMZ D ON AG.AGENT_CONNECTED_IP = D.DMZ_IP
					 ,PI_SUMMARY F
				WHERE  A.GROUP_ID	= F.GROUP_ID
				  AND A.TARGET_ID	= F.TARGET_ID
				  AND A.HASH_ID		= F.OBJECT_ID
				  AND A.CREDATE BETWEEN CONCAT(#{SCH_FROM_CREDATE},' 00:00:00') AND CONCAT(#{SCH_TO_CREDATE},' 23:59:59')		# 기존 조회조건 : 검출일	
				  <if test="SCH_TARGET != null and SCH_TARGET != ''">
				  	AND C.NAME LIKE CONCAT('%',#{SCH_TARGET},'%')			# 기존 조회조건 : 호스트
				  </if>
				  <if test="SCH_PATH != null and SCH_PATH != ''">
				  	AND A.PATH LIKE CONCAT('%',#{SCH_PATH},'%')				# 기존 조회조건 : 경로명
				  </if>
				  <if test="SCH_OWNER != null and SCH_OWNER != ''">
				  	AND A.OWNER LIKE CONCAT('%',#{SCH_OWNER},'%')			# 추가 조회조건 : 담당자
				  </if>
				  <if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
				  	<if test="SCH_PROCESSING_FLAG != '-1'">
				  		AND B.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
				  	</if>
				  	<if test="SCH_PROCESSING_FLAG == '-1'">
				  		AND B.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
				  	</if>
				  </if>
				  <if test='SCH_D_P_C_G_REGDATE_CHK == "Y"'>
				  	AND B.REGDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')		# 추가 조회조건 : 기안일		조회조건 변경: 문서생성일->기안일 (프렌트리 전준현K 2019.10.15)
				  </if>
				  <if test="SCH_DMZ_SELECT != null and SCH_DMZ_SELECT != ''">
				  	<if test="SCH_DMZ_SELECT == 0">
				  	   AND D.DMZ_IP IS NULL	
				  	</if>
				  	<if test="SCH_DMZ_SELECT == 1">
					   AND D.DMZ_IP IS NOT NULL
			      	</if>
				  </if>	
				  <if test="SCH_OFFICE_CODE != null and SCH_OFFICE_CODE != ''">
						AND (SELECT U.INSA_CODE FROM PI_USER U WHERE U.USER_NO = A.OWNER) LIKE CONCAT('%',#{SCH_OFFICE_CODE},'%')		# 추가 조회조건 : 팀명	
				  </if>	  
			) A
			GROUP BY A.HASH_ID
			HAVING TYPE != 0
			ORDER BY A.TARGET_NAME, A.OWNER -->
	    
		<!-- SELECT A.GROUP_ID,
				A.TARGET_ID,
				A.HASH_ID,
				A.ACCOUNT,
				A.PLATFORM,							# Os
				A.TARGET_NAME,						# 호스트
				A.PATH,								# 경로
				A.OFFICE_NM,						# 팀명
				A.USER_ID,							# 사번
				A.USER_NM,							# 담당자명
				SUM(A.TYPE1)		AS TYPE1,		# 주민번호
				SUM(A.TYPE2)		AS TYPE2,		# 외국인번호
				SUM(A.TYPE3)		AS TYPE3,		# 여권번호
				SUM(A.TYPE4)		AS TYPE4,		# 운전번호
				<if test="SCH_DMZ_SELECT == 1">
					SUM(A.TYPE6)		AS TYPE6,		# 카드번호
					SUM(A.TYPE5)		AS TYPE5,		# 계좌번호
					SUM(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE6 + A.TYPE5) AS TYPE,		# 총개수
				</if>
				<if test="SCH_DMZ_SELECT == 0">
					'N/A' AS TYPE6,		# 카드번호
					'N/A' AS TYPE5,		# 계좌번호
					SUM(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4) AS TYPE,		# 총개수
				</if>
				A.CREDATE,							# 검출일
				A.DELDATE,							# 삭제일
				A.D_P_C_G_REGDATE,					# 기안일
				A.D_P_G_USER_NO		AS ACCOUNT_USER_NO,		# 기안자NO
				(SELECT USER_NAME FROM PI_USER PI WHERE PI.USER_NO = A.D_P_G_USER_NO LIMIT 1) AS ACCOUNT_USER_NM,	# 기안자
				A.D_P_G_OKDATE 	AS OKDATE,			# 결재일
				A.D_P_G_OK_USER_NO	AS OKUSER_NO,	# 결재자NO
				(SELECT USER_NAME FROM PI_USER PI WHERE PI.USER_NO = A.D_P_G_OK_USER_NO LIMIT 1) AS OK_ACCOUNT_USER_NM,  # 결재자
				A.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
				(CASE WHEN A.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN A.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END)	AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
				A.D_P_C_G_REASON,					# 메모내용(문서 메모내용)
				A.PROCESSING_FLAG_NAME,				# 조치방법
				A.D_P_G_NEXT_DATE_REMEDI,			# 조치예정일
				A.NOTE
		  FROM (
				SELECT A.GROUP_ID,
						A.TARGET_ID,
						A.HASH_ID,
						C.NAME		AS TARGET_NAME,
						D.DMZ_IP,
						C.PLATFORM,
						A.PATH,
						E.OFFICE_NM,
						E.USER_ID,
						E.USER_NM,
						DATE_FORMAT(A.CREDATE, '%Y-%m-%d %H:%i:%S') AS CREDATE,
						DATE_FORMAT(A.DELDATE, '%Y-%m-%d %H:%i:%S') AS DELDATE,
						A.ACCOUNT,
						B.PROCESSING_FLAG,
						I.PROCESSING_FLAG_NAME,
						DATE_FORMAT(B.REGDATE, '%Y-%m-%d %H:%i:%S') AS REGDATE,
						DATE_FORMAT(B.OKDATE, '%Y-%m-%d %H:%i:%S') AS OKDATE,
						B.USER_NO,
						B.OKUSER_NO,
						B.APPROVAL_STATUS,
						G.NOTE,
						DATE_FORMAT(H.REGDATE, '%Y-%m-%d %H:%i:%S')				AS D_P_C_G_REGDATE,
						G.USER_NO				AS D_P_G_USER_NO,
						DATE_FORMAT(G.OKDATE, '%Y-%m-%d %H:%i:%S')				AS D_P_G_OKDATE,
						G.OK_USER_NO 			AS D_P_G_OK_USER_NO,
						H.REASON				AS D_P_C_G_REASON,
						DATE_FORMAT(G.NEXT_DATE_REMEDI, '%Y-%m-%d %H:%i:%S')	AS D_P_G_NEXT_DATE_REMEDI,
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN RRN') 					> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE1,		# 주민등록번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER')	> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE4,		# 운전면허번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') 		> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE2,		# 외국인등록번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN PASSPORT') 				> 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE3,		# 여권번호
						CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'ACCOUNT NUMBER') 						> 0 THEN F.MATCH_COUNT ELSE 0 END AS TYPE5,		# 계좌번호
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'AMERICAN EXPRESS') 					> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'MAESTRO') 								> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'VISA') 								> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'PRIVATE LABEL CARD') 					> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'DINERS CLUB') 							> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'JCB') 									> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'LASER') 								> 0 THEN F.MATCH_COUNT ELSE 0 END +
						CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'MASTER') 								> 0 THEN F.MATCH_COUNT ELSE 0 END AS TYPE6		# 신용카드
				FROM  PI_FIND A LEFT OUTER JOIN PI_DATA_PROCESSING B ON A.GROUP_ID = B.GROUP_ID AND A.TARGET_ID = B.TARGET_ID AND A.HASH_ID = B.HASH_ID
								LEFT OUTER JOIN PI_DATA_PROCESSING_GROUP G ON B.DATA_PROCESSING_GROUP_IDX = G.IDX
								LEFT OUTER JOIN PI_DATA_PROCESSING_CHARGE_GROUP H ON G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID
								LEFT OUTER JOIN PI_DATA_PROCESSING_FLAG I ON B.PROCESSING_FLAG = I.PROCESSING_FLAG
								LEFT OUTER JOIN PI_ACCOUNT_INFO E ON A.OWNER = E.USER_ID AND A.ACCOUNT = E.ACCOUNT
								LEFT OUTER JOIN PI_TARGETS C ON A.GROUP_ID	= C.GROUP_ID AND A.TARGET_ID	= C.TARGET_ID
								LEFT OUTER JOIN PI_AGENTS AG ON C.NAME = AG.AGENT_NAME 
								LEFT OUTER JOIN PI_DMZ D ON AG.AGENT_CONNECTED_IP = D.DMZ_IP
					 ,PI_SUMMARY F
				WHERE  A.GROUP_ID	= F.GROUP_ID
				  AND A.TARGET_ID	= F.TARGET_ID
				  AND A.HASH_ID		= F.OBJECT_ID
				  <if test="SCH_TARGET != null and SCH_TARGET != ''">
				  	AND C.NAME LIKE CONCAT('%',#{SCH_TARGET},'%')			# 기존 조회조건 : 호스트
				  </if>
				  <if test="SCH_PATH != null and SCH_PATH != ''">
				  	AND A.PATH LIKE CONCAT('%',#{SCH_PATH},'%')				# 기존 조회조건 : 경로명
				  </if>
				  AND A.REGDATE BETWEEN CONCAT(#{SCH_FROM_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_REGDATE},' 23:59:59')	# 기존 조회조건 : 문서저장일  
				  AND A.CREDATE BETWEEN CONCAT(#{SCH_FROM_CREDATE},' 00:00:00') AND CONCAT(#{SCH_TO_CREDATE},' 23:59:59')		# 기존 조회조건 : 검출일		조회조건 변경: 문서저장일->검출일 (프렌트리 전준현K 2019.10.15) 
				  
				  <if test="SCH_OFFICE_CODE != null and SCH_OFFICE_CODE != ''">
				  	AND E.OFFICE_CODE LIKE CONCAT('%',#{SCH_OFFICE_CODE},'%')		# 추가 조회조건 : 팀명
				  </if>
				  <if test="SCH_OWNER != null and SCH_OWNER != ''">
				  	AND A.OWNER LIKE CONCAT('%',#{SCH_OWNER},'%')			# 추가 조회조건 : 담당자
				  </if>
				  <if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
				  	<if test="SCH_PROCESSING_FLAG != '-1'">
				  		AND B.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
				  	</if>
				  	<if test="SCH_PROCESSING_FLAG == '-1'">
				  		AND B.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
				  	</if>
				  </if>
				  AND A.CREDATE BETWEEN CONCAT(#{SCH_FROM_CREDATE},' 00:00:00') AND CONCAT(#{SCH_TO_CREDATE},' 23:59:59')		# 추가 조회조건 : 문서생성일
				  <if test='SCH_D_P_C_G_REGDATE_CHK == "Y"'>
				  	AND H.REGDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')		# 추가 조회조건 : 기안일		조회조건 변경: 문서생성일->기안일 (프렌트리 전준현K 2019.10.15)
				  </if>
				  
			) A
			WHERE 1=1
			<if test="SCH_DMZ_SELECT == 0">
			AND A.DMZ_IP IS NULL
			AND A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 != 0
			</if>
			<if test="SCH_DMZ_SELECT == 1">
			AND A.DMZ_IP IS NOT NULL
			</if>
		GROUP BY A.GROUP_ID, A.TARGET_ID, A.HASH_ID, A.ACCOUNT, A.PLATFORM, A.TARGET_NAME, A.PATH, A.OFFICE_NM, A.USER_ID, A.USER_NM, A.CREDATE, A.DELDATE, A.D_P_C_G_REGDATE,
				 A.D_P_G_USER_NO, A.D_P_G_OKDATE, A.D_P_G_OK_USER_NO, A.PROCESSING_FLAG, A.D_P_C_G_REASON, A.PROCESSING_FLAG_NAME, A.D_P_G_NEXT_DATE_REMEDI, A.NOTE
		 -->
		<!-- old query script
		SELECT  A.GROUP_ID,
				A.TARGET_ID,
				A.HASH_ID,
				A.ACCOUNT,
				A.TARGET_NAME, # Hostname
				A.AGENT_PLATFORM, # OS
				A.PATH, # 경로
				A.OFFICE_NM, # 팀명
				A.USER_ID, # 사번
				A.USER_NM, # 담당자명
				A.CREDATE, # 생성일
				A.DELDATE, # 삭제일
				A.PROCESSING_FLAG, # 처리 상태 
				A.REGDATE, # 기안일
				A.OKDATE, # 결재일
				A.USER_NO, # 기안자
				A.OKUSER_NO, # 결재자
				(SELECT USER_NM FROM PI_ACCOUNT_INFO AI WHERE AI.USER_ID = A.USER_NO AND AI.ACCOUNT = A.ACCOUNT AND AI.SVR_HOST = A.TARGET_NAME LIMIT 1) AS ACCOUNT_USER_NM,  # 기안자
				(SELECT USER_NM FROM PI_ACCOUNT_INFO AI WHERE AI.USER_ID = A.OKUSER_NO AND AI.ACCOUNT = A.ACCOUNT AND AI.SVR_HOST = A.TARGET_NAME LIMIT 1) AS ACCOUNT_OKUSER_NM,  # 결재자
				A.APPROVAL_STATUS,
				A.NOTE, 
				A.TYPE1, # 주민번호
				A.TYPE2, # 외국인
				A.TYPE3, # 여권
				A.TYPE4, # 운전면허번호
				A.TYPE5, # 계좌
				A.TYPE6 # 카드
		  FROM (
			    SELECT A.GROUP_ID, A.TARGET_ID, A.HASH_ID, C.NAME AS TARGET_NAME, D.AGENT_PLATFORM, A.PATH, E.OFFICE_NM, E.USER_ID, E.USER_NM,
				    DATE_FORMAT(A.CREDATE, '%Y-%m-%d %H:%i:%S') AS CREDATE, DATE_FORMAT(A.DELDATE, '%Y-%m-%d %H:%i:%S') AS DELDATE, A.ACCOUNT, B.PROCESSING_FLAG, 
				    DATE_FORMAT(B.REGDATE, '%Y-%m-%d %H:%i:%S') AS REGDATE, DATE_FORMAT(B.OKDATE, '%Y-%m-%d %H:%i:%S') AS OKDATE,
				    B.USER_NO, B.OKUSER_NO, B.APPROVAL_STATUS, G.NOTE,
				    CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE1, # 주민등록번호
				    CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE4, # 운전면허번호
				    CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE2, # 외국인등록번호
				    CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN f.MATCH_COUNT ELSE 0 END AS TYPE3, # 여권번호
				    CASE WHEN INSTR(UPPER(f.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN F.MATCH_COUNT ELSE 0 END AS TYPE5, # 계좌번호
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'MAESTRO') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'VISA') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'DINERS CLUB') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'JCB') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'LASER') > 0 THEN F.MATCH_COUNT ELSE 0 END +
				    CASE WHEN INSTR(UPPER(F.DATA_TYPE), 'MASTER') > 0 THEN F.MATCH_COUNT ELSE 0 END AS TYPE6 # 신용카드
		      FROM PI_FIND A, PI_DATA_PROCESSING B, PI_TARGETS C, PI_AGENTS D, PI_ACCOUNT_INFO E, PI_SUMMARY F, PI_DATA_PROCESSING_GROUP G
		     WHERE B.GROUP_ID = A.GROUP_ID
		       AND B.TARGET_ID = A.TARGET_ID
		       AND B.HASH_ID = A.HASH_ID
		       AND C.GROUP_ID = B.GROUP_ID
		       AND C.TARGET_ID = A.TARGET_ID
		       AND C.NAME = D.AGENT_NAME
		       AND E.USER_ID = A.OWNER
		       AND E.ACCOUNT = A.ACCOUNT
		       AND F.GROUP_ID = A.GROUP_ID
		       AND F.TARGET_ID = A.TARGET_ID
		       AND F.OBJECT_ID = A.HASH_ID
		       AND A.REGDATE BETWEEN CONCAT(#{fromDate},' 00:00:00') AND CONCAT(#{toDate},' 23:59:59')
		       <if test="owner != null and owner != ''">
		       AND C.NAME LIKE CONCAT('%',#{owner},'%')
		       </if>
		       <if test="filename != null and filename != ''">
		       AND A.PATH LIKE CONCAT('%',#{filename},'%')
		       </if>
				) A
		 -->
    </select>
	
	<select id="searchSummaryRegDateList" parameterType="hashmap" resultType="hashmap">
		SELECT DISTINCT 
    		A.GROUP_ID, 	
		    A.TARGET_ID, 
			A.HASH_ID, 
			A.ACCOUNT, 
			A.PLATFORM, 
			A.NAME AS TARGET_NAME, 
			A.PATH, # 경로
			CONCAT ('"', A.PATH, '"') AS PATH2,
			IFNULL((CASE WHEN A.AP_NO = 0 THEN A.GROUP_NAME
				  WHEN A.AP_NO != 0 THEN TU.TEAM_NAME END), '') AS OFFICE_NM,
			A.COMMENTS, #코멘트
			A.OWNER AS USER_ID, # 사번
			A.AP_NO,
			(CASE WHEN TU.OWNER_CNT IS NULL 
					THEN 0
					ELSE TU.OWNER_CNT
			END ) AS OWNER_CNT,

			IFNULL(A.USER_NAME, '') AS USER_NAME,				# 담당자 명
			TYPE1, # 주민번호
			TYPE2, # 외국인번호
			TYPE3, # 여권번호
			TYPE4, # 운전면허번호
			TYPE5, # 카드번호
			TYPE6, # 계좌번호
			TYPE7, # 전화번호
			TYPE8, # 휴대폰번호
			(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE5 + A.TYPE6 + A.TYPE7 + A.TYPE8) AS TYPE,		# 총개수

			IFNULL(A.CREDATE, '') AS CREDATE, # 검출일
			A.REGDATE, # 업데이트일
			A.USER_NO AS ACCOUNT_USER_NO, # 기안자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = A.USER_NO LIMIT 1), '') AS ACCOUNT_USER_NM,	# 기안자
			<!-- IFNULL(DATE_FORMAT(A.REGDATE, '%Y-%m-%d %H:%i:%s'), '') AS D_P_C_G_REGDATE, # 기안일 -->
			IFNULL((CASE WHEN A.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(A.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END), '') AS D_P_C_G_REGDATE,
			A.OKUSER_NO AS OKUSER_NO,	# 결재자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = A.OKUSER_NO LIMIT 1), '') AS OK_ACCOUNT_USER_NM,	# 결재자
			(CASE WHEN A.APPROVAL_STATUS='E' THEN '승인' WHEN A.APPROVAL_STATUS ='D' THEN '반려' WHEN A.APPROVAL_STATUS ='W' THEN '대기' ELSE '' END) AS APPROVAL_REGULT,
			A.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
			IFNULL(A.IP, '') AS IP, 
			IFNULL(A.DELDATE, '') AS DELDATE, 
			(CASE WHEN A.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN A.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END) AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
			(CASE WHEN (SELECT 'DMZ' FROM pi_dmz DMZ WHERE DMZ.DMZ_IP = A.IP LIMIT 1) = 'DMZ' THEN 'DMZ' ELSE 'NOTDMZ' END) AS DMZ,
			(SELECT H.REASON FROM PI_DATA_PROCESSING_GROUP G, PI_DATA_PROCESSING_CHARGE_GROUP H 
				WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID) AS D_P_C_G_REASON,	
			IFNULL((SELECT PROCESSING_FLAG_NAME FROM PI_DATA_PROCESSING_FLAG I WHERE I.PROCESSING_FLAG = A.PROCESSING_FLAG), '') AS PROCESSING_FLAG_NAME,				# 조치방법
			(SELECT NEXT_DATE_REMEDI FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX) AS D_P_G_NEXT_DATE_REMEDI,		
			(SELECT G.NOTE FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX) AS NOTE,
			<!-- IFNULL((CASE WHEN A.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(A.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END), '') AS OKDATE -->
			IFNULL((SELECT DATE_FORMAT(H.OKDATE, '%Y-%m-%d %H:%i:%s') FROM pi_data_processing_group G, PI_DATA_PROCESSING_CHARGE_GROUP H
				WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID), '') AS OKDATE
		FROM (SELECT
			F.GROUP_ID, F.HASH_ID, F.PATH, F.FID, F.OWNER, F.TARGET_ID, F.ACCOUNT, 
			SL.USER_NO, SL.OKUSER_NO, SL.APPROVAL_STATUS, SL.PROCESSING_fLAG, SL.DATA_PROCESSING_GROUP_IDX, SL.OKDATE,
			T.COMMENTS,
			T.NAME,
			(SELECT TG.NAME FROM PI_TARGET_GROUP TG WHERE ST.GROUPID = TG.IDX) AS GROUP_NAME,
			T.AP_NO,
			T.PLATFORM,
			(SELECT AG.AGENT_CONNECTED_IP FROM pi_agents AG WHERE T.NAME = AG.AGENT_NAME LIMIT 1) AS IP,
			U.USER_NAME AS USER_NAME,
			DATE_FORMAT(F.CREDATE, '%Y-%m-%d %H:%i:%s') AS CREDATE,
			DATE_FORMAT(F.REGDATE, '%Y-%m-%d %H:%i:%s') AS REGDATE,
			DATE_FORMAT(F.DELDATE, '%Y-%m-%d %H:%i:%s') AS DELDATE,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE2,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE3, 
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE4,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE5,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'VISA') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MAESTRO') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DINERS CLUB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'JCB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'LASER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'CHINA UNION PAY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
	  		SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DISCOVER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'TROY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MASTERCARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE6,

		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'EMAIL') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN MOBILE PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8
		FROM (SELECT USER_NO, OKUSER_NO,
						 PROCESSING_FLAG, DATA_PROCESSING_GROUP_IDX,
						 APPROVAL_STATUS, TARGET_ID,
						 AP_NO, HASH_ID, OKDATE
				 FROM pi_data_processing
				 <if test="SCH_FROM_D_P_C_G_REGDATE != null and SCH_FROM_D_P_C_G_REGDATE != ''">
				 	WHERE OKDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')
				 </if>			  
				) SL,
				pi_find F, pi_targets T
			LEFT OUTER JOIN skt_toms ST 		ON T.NAME = ST.HOSTNM
			LEFT OUTER JOIN PI_TARGET_USER TU	ON TU.TARGET_ID = T.TARGET_ID AND T.AP_NO = TU.AP_NO
			LEFT OUTER JOIN PI_USER U 			ON U.USER_NO = TU.USER_NO
			LEFT OUTER JOIN PI_GROUP G			ON U.INSA_CODE = G.INSA_CODE
			, pi_summary S
		WHERE SL.TARGET_ID = F.TARGET_ID
			AND SL.TARGET_ID = T.TARGET_ID
			AND SL.TARGET_ID = S.TARGET_ID
			AND SL.AP_NO = F.AP_NO
			AND SL.AP_NO = T.AP_NO
			AND SL.AP_NO = S.AP_NO	
			AND SL.HASH_ID = F.HASH_ID
			AND SL.HASH_ID = S.OBJECT_ID
			<if test="SCH_GROUP != null and SCH_GROUP != ''">
			 AND (SELECT TG.NAME FROM PI_TARGET_GROUP TG WHERE ST.GROUPID = TG.IDX) = #{SCH_GROUP}
		    </if>
		    <if test="SCH_TARGET_ID != null and SCH_TARGET_ID != ''">
			AND T.TARGET_ID = #{SCH_TARGET_ID}
		  	</if>	
			AND T.AP_NO = 0
		GROUP BY F.HASH_ID, SL.TARGET_ID) A
			LEFT OUTER JOIN (SELECT 
					TU.TARGET_ID, TU.USER_NO, COUNT(TU.USER_NO) AS OWNER_CNT, U.USER_NAME, G.TEAM_NAME, TU.AP_NO
				FROM PI_TARGET_USER TU
				LEFT OUTER JOIN PI_USER U ON TU.USER_NO = U.USER_NO
				LEFT OUTER JOIN PI_GROUP G ON G.INSA_CODE = U.INSA_CODE
				GROUP BY TU.TARGET_ID
			) TU ON TU.TARGET_ID = A.TARGET_ID AND TU.AP_NO = A.AP_NO
		WHERE 1= 1
		<if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
			<if test="SCH_PROCESSING_FLAG != '-1'">
				AND DP.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
			</if>
			<if test="SCH_PROCESSING_FLAG == '-1'">
				AND DP.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
			</if>
		</if>
		HAVING TYPE != 0

		ORDER BY A.TARGET_ID, A.PATH
	</select>
	
	<select id="searchPCSummaryList" parameterType="hashmap" resultType="hashmap">
		SELECT DISTINCT 
    		A.GROUP_ID, 	
		    A.TARGET_ID, 
			A.HASH_ID, 
			A.ACCOUNT, 
			A.PLATFORM, 
			A.NAME AS TARGET_NAME,
			A.PATH, # 경로
			CONCAT ('"', A.PATH, '"') AS PATH2,
			IFNULL((CASE WHEN A.AP_NO = 0 THEN A.GROUP_NAME
				  WHEN A.AP_NO != 0 THEN TU.TEAM_NAME END), '') AS OFFICE_NM,
			A.COMMENTS, #코멘트
			A.OWNER AS USER_ID, # 사번
			A.AP_NO,
			(CASE WHEN TU.OWNER_CNT IS NULL 
					THEN 0
					ELSE TU.OWNER_CNT
			END ) AS OWNER_CNT,

			IFNULL(A.USER_NAME, '') AS USER_NAME,				# 담당자 명
			TYPE1, # 주민번호
			TYPE2, # 외국인번호
			TYPE3, # 여권번호
			TYPE4, # 운전면허번호
			TYPE5, # 카드번호
			TYPE6, # 계좌번호
			TYPE7, # 전화번호
			TYPE8, # 휴대폰번호
			(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE5 + A.TYPE6 + A.TYPE7 + A.TYPE8) AS TYPE,		# 총개수

			IFNULL(A.CREDATE, '') AS CREDATE, # 검출일
			A.REGDATE, # 업데이트일
			DP.USER_NO AS ACCOUNT_USER_NO, # 기안자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = DP.USER_NO LIMIT 1), '') AS ACCOUNT_USER_NM,	# 기안자
			IFNULL(DATE_FORMAT(A.REGDATE, '%Y-%m-%d %H:%i:%s'), '') AS D_P_C_G_REGDATE, # 기안일
			DP.OKUSER_NO AS OKUSER_NO,	# 결재자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = DP.OKUSER_NO LIMIT 1), '') AS OK_ACCOUNT_USER_NM,	# 결재자
			(CASE WHEN DP.APPROVAL_STATUS='E' THEN '승인' WHEN DP.APPROVAL_STATUS ='D' THEN '반려' WHEN DP.APPROVAL_STATUS ='W' THEN '대기' ELSE '' END) AS APPROVAL_REGULT,
			DP.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
			IFNULL(A.IP, '') AS IP,
			IFNULL(A.DELDATE, '') AS DELDATE, 
			(CASE WHEN DP.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN DP.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END) AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
			(CASE WHEN (SELECT 'DMZ' FROM pi_dmz DMZ WHERE DMZ.DMZ_IP = A.IP LIMIT 1) = 'DMZ' THEN 'DMZ' ELSE 'NOTDMZ' END) AS DMZ,
			(SELECT H.REASON FROM PI_DATA_PROCESSING_GROUP G, PI_DATA_PROCESSING_CHARGE_GROUP H 
				WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID) AS D_P_C_G_REASON,	
			IFNULL((SELECT PROCESSING_FLAG_NAME FROM PI_DATA_PROCESSING_FLAG I WHERE I.PROCESSING_FLAG = DP.PROCESSING_FLAG), '') AS PROCESSING_FLAG_NAME,				# 조치방법
			(SELECT NEXT_DATE_REMEDI FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX) AS D_P_G_NEXT_DATE_REMEDI,		
			(SELECT G.NOTE FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = DP.DATA_PROCESSING_GROUP_IDX) AS NOTE,
			IFNULL((CASE WHEN DP.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(DP.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END), '') AS OKDATE
		FROM (SELECT
			F.GROUP_ID, F.HASH_ID, F.PATH, F.FID, F.OWNER, F.TARGET_ID, F.ACCOUNT, 
			T.COMMENTS,
			(SELECT TG.NAME FROM PI_TARGET_GROUP TG WHERE ST.GROUPID = TG.IDX) AS GROUP_NAME,
			T.AP_NO,
			T.NAME AS FULL_NAME,
			T.TARGET_USE,
			SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
			SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
			SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
			T.PLATFORM,
			(SELECT AG.AGENT_CONNECTED_IP FROM pi_agents AG WHERE T.NAME = AG.AGENT_NAME LIMIT 1) AS IP,
			U.USER_NAME AS USER_NAME,
			DATE_FORMAT(F.CREDATE, '%Y-%m-%d %H:%i:%s') AS CREDATE,
			DATE_FORMAT(F.REGDATE, '%Y-%m-%d %H:%i:%s') AS REGDATE,
			DATE_FORMAT(F.DELDATE, '%Y-%m-%d %H:%i:%s') AS DELDATE,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE2,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE3, 
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE4,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE5,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'VISA') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MAESTRO') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DINERS CLUB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'JCB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'LASER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'CHINA UNION PAY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
	  		SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DISCOVER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'TROY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MASTERCARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE6,
		   <!--  SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN LOCAL PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7, -->
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'EMAIL') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN MOBILE PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8
		FROM (SELECT 
				SL.TARGET_ID, 
				SL.AP_NO
			  FROM pi_scheduled_location SL
			  WHERE SL.STATUS IN ('completed', 'stopped', 'interrupted')
			  	<if test="SCH_DATE == 0">
					AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d') BETWEEN CONCAT(#{SCH_FROM_CREDATE}) AND CONCAT(#{SCH_TO_CREDATE})
					<!-- AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d %h:%i:%s') BETWEEN CONCAT(#{SCH_FROM_CREDATE}, '00:00:00') AND CONCAT(#{SCH_TO_CREDATE},'23:59:59') -->
				</if>
				<!-- <if test="SCH_DATE == 1">
					AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d') BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE}) AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE})
					AND DATE_FORMAT(FROM_UNIXTIME(SL.updated), '%Y-%m-%d %h:%i:%s') BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE}, '00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},'23:59:59')
				</if> -->
			  GROUP BY SL.TARGET_ID, SL.AP_NO) SL,
				pi_find F, pi_targets T
			LEFT OUTER JOIN skt_toms ST 		ON T.NAME = ST.HOSTNM
			LEFT OUTER JOIN PI_TARGET_USER TU	ON TU.TARGET_ID = T.TARGET_ID AND T.AP_NO = TU.AP_NO
			LEFT OUTER JOIN PI_USER U 			ON U.USER_NO = TU.USER_NO
			LEFT OUTER JOIN PI_GROUP G			ON U.INSA_CODE = G.INSA_CODE
			, pi_summary S
		WHERE SL.TARGET_ID = F.TARGET_ID
			AND SL.AP_NO = F.AP_NO
		  	AND F.HASH_ID = S.OBJECT_ID
			AND SL.TARGET_ID = T.TARGET_ID
			AND SL.AP_NO = T.AP_NO
			AND SL.TARGET_ID = S.TARGET_ID
			AND SL.AP_NO = S.AP_NO
		  <if test="SCH_DATE != null and SCH_DATE != ''">
		  	AND F.CREDATE BETWEEN CONCAT(#{SCH_FROM_CREDATE},' 00:00:00') AND CONCAT(#{SCH_TO_CREDATE},' 23:59:59')		# 기존 조회조건 : 검출일
		  </if>	
		  <if test="SCH_GROUP != null and SCH_GROUP != ''">
			AND T.TARGET_ID IN (
				SELECT TARGET_ID FROM 
				(WITH RECURSIVE CTE AS 
				(SELECT
						0 AS LEVEL, 
						G.INSA_CODE,
						G.TEAM_NAME,
						G.TEAM_NAME AS FULL_TEAM_NM,
						G.UP_IDX
					FROM pi_group G
					WHERE 1 = 1
					  AND G.INSA_CODE = #{GROUP_ID}
					UNION ALL
					SELECT 
						CTE.LEVEL + 1 AS LEVEL,
						PG.INSA_CODE,
						PG.TEAM_NAME,
						CONCAT(CTE.FULL_TEAM_NM, '>', PG.TEAM_NAME) AS FULL_TEAM_NM,
						PG.UP_IDX
					FROM pi_group PG, CTE
					WHERE PG.UP_IDX = CTE.INSA_CODE
				)
				SELECT TU.TARGET_ID,
					TU.AP_NO
				FROM CTE, pi_user U, pi_target_user TU
				WHERE CTE.INSA_CODE = U.INSA_CODE
				  AND TU.USER_NO = U.USER_NO
				  AND TU.AP_NO != 0) AS D
			)
		  </if>	
		  <if test="SCH_TARGET_ID != null and SCH_TARGET_ID != ''">
			AND T.TARGET_ID = #{SCH_TARGET_ID}
		  </if>	
			AND T.AP_NO != 0
			<!-- <if test= "AP_NO == 1">
				AND G.TEAM_NAME = #{SCH_GROUP}
				AND T.AP_NO != 0			
			</if> -->
		<!-- <if test="SCH_OBJECT != null and SCH_OBJECT != '' and SCH_OBJECT == 'group' ">
			<if test="GROUP_ID != null and GROUP_ID != ''">
				AND T.TARGET_ID IN (
					with recursive cte AS ( 
					SELECT 
						idx, 
						NAME, 
						up_idx, 
						1 AS LEVEL 
					from pi_target_group 
					where idx = 64 
					union ALL 
						SELECT 
							p.idx, 
							p.name,
							p.up_idx, 
							1+LEVEL as LEVEL 
						from pi_target_group p 
						INNER join cte on p.up_idx = cte.idx 
					)
					select T.TARGET_ID
					from cte, pi_targets t
					WHERE cte.idx = t.group_idx
					AND t.target_use = 'Y'
				)
			</if>
		</if>
		<if test="SCH_OBJECT != null or SCH_OBJECT != '' or SCH_OBJECT == 'host' ">
			<if test="SCH_TARGET != null and SCH_TARGET != ''">
				AND T.NAME LIKE CONCAT('%',#{SCH_TARGET},'%')			# 기존 조회조건 : 호스트
			</if>
		</if>
		<if test="SCH_PATH != null and SCH_PATH != ''">
			AND F.PATH LIKE CONCAT('%',#{SCH_PATH},'%')				# 기존 조회조건 : 경로명
		</if>
		<if test="SCH_OWNER != null and SCH_OWNER != ''">
			AND F.OWNER LIKE CONCAT('%',#{SCH_OWNER},'%')			# 추가 조회조건 : 담당자
		</if>
		<if test="SCH_OFFICE_CODE != null and SCH_OFFICE_CODE != ''">
			AND (SELECT U.INSA_CODE FROM PI_USER U WHERE U.USER_NO = F.OWNER) LIKE CONCAT('%',#{SCH_OFFICE_CODE},'%')		# 추가 조회조건 : 팀명	
		</if> -->	
		GROUP BY F.HASH_ID) A 
			LEFT OUTER JOIN pi_data_processing DP ON A.HASH_ID = DP.HASH_ID AND A.TARGET_ID = DP.TARGET_ID
			LEFT OUTER JOIN (SELECT 
					TU.TARGET_ID, TU.USER_NO, COUNT(TU.USER_NO) AS OWNER_CNT, U.USER_NAME, G.TEAM_NAME, TU.AP_NO
				FROM PI_TARGET_USER TU
				LEFT OUTER JOIN PI_USER U ON TU.USER_NO = U.USER_NO
				LEFT OUTER JOIN PI_GROUP G ON G.INSA_CODE = U.INSA_CODE
				GROUP BY TU.TARGET_ID
			) TU ON TU.TARGET_ID = A.TARGET_ID AND TU.AP_NO = A.AP_NO
		WHERE 1= 1
		<if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
			<if test="SCH_PROCESSING_FLAG != '-1'">
				AND DP.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
			</if>
			<if test="SCH_PROCESSING_FLAG == '-1'">
				AND DP.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
			</if>
		</if>
		<!-- <if test="SCH_DATE == 1">
			AND DP.REGDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')		# 추가 조회조건 : 기안일		조회조건 변경: 문서생성일->기안일 (프렌트리 전준현K 2019.10.15)
		</if> -->
		HAVING TYPE != 0
			
		ORDER BY A.TARGET_ID, A.PATH
	</select>
	
	<select id="searchPCSummaryRegDateList" parameterType="hashmap" resultType="hashmap">
		SELECT DISTINCT 
    		A.GROUP_ID, 	
		    A.TARGET_ID, 
			A.HASH_ID, 
			A.ACCOUNT, 
			A.PLATFORM, 
			A.NAME AS TARGET_NAME, 
			A.PATH, # 경로
			CONCAT ('"', A.PATH, '"') AS PATH2,
			IFNULL((CASE WHEN A.AP_NO = 0 THEN A.GROUP_NAME
				  WHEN A.AP_NO != 0 THEN TU.TEAM_NAME END), '') AS OFFICE_NM,
			A.COMMENTS, #코멘트
			A.OWNER AS USER_ID, # 사번
			A.AP_NO,
			(CASE WHEN TU.OWNER_CNT IS NULL 
					THEN 0
					ELSE TU.OWNER_CNT
			END ) AS OWNER_CNT,

			IFNULL(A.USER_NAME, '') AS USER_NAME,				# 담당자 명
			TYPE1, # 주민번호
			TYPE2, # 외국인번호
			TYPE3, # 여권번호
			TYPE4, # 운전면허번호
			TYPE5, # 카드번호
			TYPE6, # 계좌번호
			TYPE7, # 전화번호
			TYPE8, # 휴대폰번호
			(A.TYPE1 + A.TYPE2 + A.TYPE3 + A.TYPE4 + A.TYPE5 + A.TYPE6 + A.TYPE7 + A.TYPE8) AS TYPE,		# 총개수

			IFNULL(A.CREDATE, '') AS CREDATE, # 검출일
			A.REGDATE, # 업데이트일
			A.USER_NO AS ACCOUNT_USER_NO, # 기안자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = A.USER_NO LIMIT 1), '') AS ACCOUNT_USER_NM,	# 기안자
			IFNULL(DATE_FORMAT(A.REGDATE, '%Y-%m-%d %H:%i:%s'), '') AS D_P_C_G_REGDATE, # 기안일
			A.OKUSER_NO AS OKUSER_NO,	# 결재자NO
			IFNULL((SELECT U.USER_NAME FROM PI_USER U WHERE U.USER_NO = A.OKUSER_NO LIMIT 1), '') AS OK_ACCOUNT_USER_NM,	# 결재자
			(CASE WHEN A.APPROVAL_STATUS='E' THEN '승인' WHEN A.APPROVAL_STATUS ='D' THEN '반려' WHEN A.APPROVAL_STATUS ='W' THEN '대기' ELSE '' END) AS APPROVAL_REGULT,
			A.PROCESSING_FLAG,					# 개인정보 여부(정탐 오탐) 코드
			IFNULL(A.IP, '') AS IP, 
			IFNULL(A.DELDATE, '') AS DELDATE, 
			(CASE WHEN A.PROCESSING_FLAG IN (1,2,3,4) THEN '정탐' WHEN A.PROCESSING_FLAG IN (5,6,7) THEN '오탐' ELSE '미처리' END) AS PROCESSING_FLAG_TYPE,		# 개인정보 여부(정탐 오탐)
			(CASE WHEN (SELECT 'DMZ' FROM pi_dmz DMZ WHERE DMZ.DMZ_IP = A.IP LIMIT 1) = 'DMZ' THEN 'DMZ' ELSE 'NOTDMZ' END) AS DMZ,
			(SELECT H.REASON FROM PI_DATA_PROCESSING_GROUP G, PI_DATA_PROCESSING_CHARGE_GROUP H 
				WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX AND G.DATA_PROCESSING_CHARGE_ID = H.DATA_PROCESSING_CHARGE_ID) AS D_P_C_G_REASON,	
			IFNULL((SELECT PROCESSING_FLAG_NAME FROM PI_DATA_PROCESSING_FLAG I WHERE I.PROCESSING_FLAG = A.PROCESSING_FLAG), '') AS PROCESSING_FLAG_NAME,				# 조치방법
			(SELECT NEXT_DATE_REMEDI FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX) AS D_P_G_NEXT_DATE_REMEDI,		
			(SELECT G.NOTE FROM PI_DATA_PROCESSING_GROUP G WHERE G.IDX = A.DATA_PROCESSING_GROUP_IDX) AS NOTE,
			IFNULL((CASE WHEN A.APPROVAL_STATUS IN ('E','D') THEN DATE_FORMAT(A.OKDATE, '%Y-%m-%d %H:%i:%s') ELSE NULL END), '') AS OKDATE
		FROM (SELECT
			F.GROUP_ID, F.HASH_ID, F.PATH, F.FID, F.OWNER, F.TARGET_ID, F.ACCOUNT, 
			SL.USER_NO, SL.OKUSER_NO, SL.APPROVAL_STATUS, SL.PROCESSING_fLAG, SL.DATA_PROCESSING_GROUP_IDX, SL.OKDATE,
			T.COMMENTS,
			(SELECT TG.NAME FROM PI_TARGET_GROUP TG WHERE ST.GROUPID = TG.IDX) AS GROUP_NAME,
			T.AP_NO,
			T.NAME AS FULL_NAME,
			T.TARGET_USE,
			SUBSTRING_INDEX(T.NAME, '.', 1) AS HOST_NAME,
			SUBSTRING_INDEX(SUBSTRING_INDEX(T.NAME, '.', -2), '.', 1) AS NAME,
			SUBSTRING_INDEX(T.NAME, '.', -1) AS SERIAL,
			T.PLATFORM,
			(SELECT AG.AGENT_CONNECTED_IP FROM pi_agents AG WHERE T.NAME = AG.AGENT_NAME LIMIT 1) AS IP,
			U.USER_NAME AS USER_NAME,
			DATE_FORMAT(F.CREDATE, '%Y-%m-%d %H:%i:%s') AS CREDATE,
			DATE_FORMAT(F.REGDATE, '%Y-%m-%d %H:%i:%s') AS REGDATE,
			DATE_FORMAT(F.DELDATE, '%Y-%m-%d %H:%i:%s') AS DELDATE,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE1,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE2,
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE3, 
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE4,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE5,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'VISA') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MAESTRO') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DINERS CLUB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'JCB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'LASER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'CHINA UNION PAY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
	  		SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DISCOVER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'TROY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MASTERCARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE6,

		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'EMAIL') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
		    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN MOBILE PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8
		FROM (SELECT USER_NO, OKUSER_NO,
						 PROCESSING_FLAG, DATA_PROCESSING_GROUP_IDX,
						 APPROVAL_STATUS, TARGET_ID,
						 AP_NO, HASH_ID, OKDATE
				 FROM pi_data_processing
				 <if test="SCH_FROM_D_P_C_G_REGDATE != null and SCH_FROM_D_P_C_G_REGDATE != ''">
				 	WHERE REGDATE BETWEEN CONCAT(#{SCH_FROM_D_P_C_G_REGDATE},' 00:00:00') AND CONCAT(#{SCH_TO_D_P_C_G_REGDATE},' 23:59:59')
				 </if>			  
				) SL,
				pi_find F, pi_targets T
			LEFT OUTER JOIN skt_toms ST 		ON T.NAME = ST.HOSTNM
			LEFT OUTER JOIN PI_TARGET_USER TU	ON TU.TARGET_ID = T.TARGET_ID AND T.AP_NO = TU.AP_NO
			LEFT OUTER JOIN PI_USER U 			ON U.USER_NO = TU.USER_NO
			LEFT OUTER JOIN PI_GROUP G			ON U.INSA_CODE = G.INSA_CODE
			, pi_summary S
		WHERE SL.TARGET_ID = F.TARGET_ID
			AND SL.TARGET_ID = T.TARGET_ID
			AND SL.TARGET_ID = S.TARGET_ID
			AND SL.AP_NO = F.AP_NO
			AND SL.AP_NO = T.AP_NO
			AND SL.AP_NO = S.AP_NO	
			AND SL.HASH_ID = F.HASH_ID
			AND SL.HASH_ID = S.OBJECT_ID
			<if test="SCH_GROUP != null and SCH_GROUP != ''">
				AND T.TARGET_ID IN (
					SELECT TARGET_ID FROM 
					(WITH RECURSIVE CTE AS 
					(SELECT
							0 AS LEVEL, 
							G.INSA_CODE,
							G.TEAM_NAME,
							G.TEAM_NAME AS FULL_TEAM_NM,
							G.UP_IDX
						FROM pi_group G
						WHERE 1 = 1
						  AND G.INSA_CODE = #{GROUP_ID}
						UNION ALL
						SELECT 
							CTE.LEVEL + 1 AS LEVEL,
							PG.INSA_CODE,
							PG.TEAM_NAME,
							CONCAT(CTE.FULL_TEAM_NM, '>', PG.TEAM_NAME) AS FULL_TEAM_NM,
							PG.UP_IDX
						FROM pi_group PG, CTE
						WHERE PG.UP_IDX = CTE.INSA_CODE
					)
					SELECT TU.TARGET_ID,
						TU.AP_NO
					FROM CTE, pi_user U, pi_target_user TU
					WHERE CTE.INSA_CODE = U.INSA_CODE
					  AND TU.USER_NO = U.USER_NO
					  AND TU.AP_NO != 0) AS D
				)
		 	</if>	
			<if test="SCH_TARGET_ID != null and SCH_TARGET_ID != ''">
			AND T.TARGET_ID = #{SCH_TARGET_ID}
		  	</if>	
			AND T.AP_NO != 0
		GROUP BY F.HASH_ID, SL.TARGET_ID) A
			LEFT OUTER JOIN (SELECT 
								TU.TARGET_ID, TU.USER_NO, COUNT(TU.USER_NO) AS OWNER_CNT, U.USER_NAME, G.TEAM_NAME, TU.AP_NO
							FROM PI_TARGET_USER TU
							LEFT OUTER JOIN PI_USER U ON TU.USER_NO = U.USER_NO
							LEFT OUTER JOIN PI_GROUP G ON G.INSA_CODE = U.INSA_CODE
							GROUP BY TU.TARGET_ID
			) TU ON TU.TARGET_ID = A.TARGET_ID AND TU.AP_NO = A.AP_NO
		WHERE 1= 1

		HAVING TYPE != 0
		<if test="SCH_PROCESSING_FLAG != null and SCH_PROCESSING_FLAG != ''">
			<if test="SCH_PROCESSING_FLAG != '-1'">
				AND DP.PROCESSING_FLAG = #{SCH_PROCESSING_FLAG} 		# 추가 조회조건 : 처리구분
			</if>
			<if test="SCH_PROCESSING_FLAG == '-1'">
				AND DP.PROCESSING_FLAG IS NULL		# 미처리 항목만 조회
			</if>
		</if>
		ORDER BY A.TARGET_ID, A.PATH
	</select>
	
	<select id="searchDataProcessingFlag" resultType="hashmap">
		SELECT PROCESSING_FLAG,
		       PROCESSING_FLAG_NAME
		  FROM PI_DATA_PROCESSING_FLAG
		 WHERE PROCESSING_FLAG IS NOT NULL
		   AND PROCESSING_FLAG_NAME IS NOT NULL
		ORDER BY PROCESSING_FLAG
	</select>
	
	<select id="getMonthlyReport" resultType="hashmap" parameterType="hashmap">
		SELECT
			TARGET_ID, YYYYMM, PATH, RRN, FOREIGNER
			, PASSPORT, DRIVER, ACCOUNT, CARD, PHONE
			, TOTAL, DEL, ENCODING, MASKING, CONFIRM_ETC
			, EXCEPTION, FALSE_AGREE, FALSE_ETC, TEMP_STOR, ACT
			, ACT_NOT ,(SELECT NAME FROM PI_TARGETS WHERE TARGET_ID = PMR.TARGET_ID) AS NAME
		FROM PI_MONTHLY_REPORT PMR
			WHERE YYYYMM = #{value}
		ORDER BY TARGET_ID
	</select>
	
	<select id="selectPersonNotCom" resultType="hashmap" parameterType="hashmap">
		SELECT 
			U.USER_NO AS USER_NO, 
			U.USER_NAME AS USER_NAME
			,SUM( CASE WHEN DATA.USER_NO = U.USER_NO THEN 1 ELSE 0 END) NOTCOMCNT
		FROM PI_USER U
			LEFT OUTER JOIN (
				SELECT 
					DP.USER_NO AS USER_NO, DPG.NEXT_DATE_REMEDI, F.PATH, F.DELDATE 
					FROM PI_DATA_PROCESSING DP
				LEFT OUTER JOIN PI_DATA_PROCESSING_GROUP DPG ON DP.DATA_PROCESSING_GROUP_IDX = DPG.IDX
				LEFT OUTER JOIN PI_FIND F ON DP.HASH_ID = F.HASH_ID
				WHERE DP.PROCESSING_FLAG = 1
				AND DP.APPROVAL_STATUS = 'E'
				AND DPG.NEXT_DATE_REMEDI &lt; DATE(NOW())
				AND F.DELDATE IS NULL
			) DATA ON DATA.USER_NO = U.USER_NO
		GROUP BY USER_NAME
		ORDER BY NOTCOMCNT DESC, USER_NAME ASC 
		LIMIT 10
	</select>
	
	<select id="selectTeamNotCom" resultType="hashmap" parameterType="hashmap">
		SELECT 
			G.INSA_CODE AS INSA_CODE, 
			G.TEAM_NAME AS TEAM_NAME
			,SUM( CASE WHEN DATA.USER_NO = U.USER_NO THEN 1 ELSE 0 END) NOTCOMCNT
		FROM PI_GROUP G 
			LEFT OUTER JOIN PI_USER U ON G.INSA_CODE = U.INSA_CODE
			LEFT OUTER JOIN (
				SELECT 
					DP.USER_NO AS USER_NO, DPG.NEXT_DATE_REMEDI, F.PATH, F.DELDATE 
					FROM PI_DATA_PROCESSING DP
				LEFT OUTER JOIN PI_DATA_PROCESSING_GROUP DPG ON DP.DATA_PROCESSING_GROUP_IDX = DPG.IDX
				LEFT OUTER JOIN PI_FIND F ON DP.HASH_ID = F.HASH_ID
				WHERE DP.PROCESSING_FLAG = 1
				AND DP.APPROVAL_STATUS = 'E'
				AND DPG.NEXT_DATE_REMEDI &lt; DATE(NOW())
				AND F.DELDATE IS NULL
			) DATA ON DATA.USER_NO = U.USER_NO
		GROUP BY TEAM_NAME
		ORDER BY NOTCOMCNT DESC, USER_NAME ASC 
		LIMIT 10
	</select>
	
	<select id="selectOwnerList" resultType="hashmap" parameterType="hashmap">
		SELECT
			TU.TARGET_ID
			,U.USER_NAME
			,G.TEAM_NAME
		FROM PI_TARGET_USER TU
			LEFT OUTER JOIN PI_USER U ON U.USER_NO = TU.USER_NO
			LEFT OUTER JOIN PI_GROUP G ON U.INSA_CODE = U.INSA_CODE
		WHERE TU.TARGET_ID = #{target_id}
			GROUP BY U.USER_NAME 
	</select>
	
	<select id="getGroupID" resultType="hashmap" parameterType="hashmap">
		SELECT T.TARGET_ID
		FROM PI_TARGETS T
			LEFT OUTER JOIN PI_SERVER_GROUP SG ON T.GROUP_ID = SG.GROUP_ID
		WHERE 1=1
		<if test="groupList != null">
			AND SG.IDX IN 
			<foreach item="item" index="index" collection="groupList" open="(" separator="," close=")">
	               #{item}
	       	</foreach>
		</if>
		<if test="targetList != null">
			AND T.TARGET_ID IN
			<foreach item="item" index="index" collection="targetList" open="(" separator="," close=")">
	               #{item}
	       	</foreach>
		</if>
	</select>
	
	 <select id="getTargetByNode" resultType="hashmap" parameterType="hashmap">
        SELECT F.TARGET_ID, 
        	HASH_ID AS ID, 
        	FID AS INFO_ID, 
        	T.NAME, 
        	IF(A.AGENT_CONNECTED = 1 , 'Connected', 'Not Connected') AS AGENT_CONNECTED,
		   IFNULL(A.AGENT_CONNECTED_IP, '-') AS AGENT_CONNECTED_IP, 
		   F.HASH_ID, 
		   F.ACCOUNT, 
		   F.OWNER AS USER_NO,
		   (SELECT U.USER_NAME FROM PI_USER U WHERE F.OWNER = U.USER_NO) AS USER_NAME,
		   DATE_FORMAT(F.credate, '%Y-%m-%d %H:%i') AS MODIFIED_DATE,
	       IF(FID IS NULL, '>', '') AS CHK, 
	       F.PATH
		FROM pi_find F
			LEFT OUTER JOIN PI_TARGETS T ON T.TARGET_ID = F.TARGET_ID AND T.AP_NO = F.AP_NO
			LEFT OUTER JOIN PI_AGENTS A ON T.NAME = A.AGENT_NAME AND T.AP_NO = A.AP_NO
		WHERE 1=1
			AND T.TARGET_ID = #{TARGET_ID}
			AND T.AP_NO = #{AP_NO}
			AND  F.REMEDIATION_STATUS IS NULL
			AND  F.CREDATE BETWEEN CONCAT(#{sch_SDATE},' 00:00:00') AND CONCAT(#{sch_EDAT},' 23:59:59')
			AND  F.DELDATE IS NULL
    </select>
    
    <select id="getInfoId" resultType="hashmap" parameterType="hashmap">
		WITH RECURSIVE CTE AS (
		   SELECT C.HASH_ID,
		     CAST('#' AS VARCHAR(50)) AS PARENT_ID,
		     C.TARGET_ID 		AS TARGET_ID,
		     C.AP_NO			AS AP_NO,
		     C.PATH				AS PATH,
		     C.PATH				AS FULL_NAME,
		     C.FID
		     FROM PI_FIND C 
		   WHERE 1 = 1
		     AND C.TARGET_ID = #{target_id}
		     AND C.AP_NO = #{ap_no}
		  AND C.HASH_ID = #{hash_id}
		  AND C.AP_NO = 0
		   UNION ALL
		   SELECT S.NODE_ID AS HASH_ID,
		     CTE.HASH_ID,
		     S.TARGET_ID,
		     S.AP_NO,
		     S.PATH AS PATH,
		     CONCAT(CTE.PATH , '>' , S.PATH) AS FULL_NAME,
		     S.INFO_ID AS FID
		     FROM PI_SUBPATH S, CTE
		    WHERE 1 = 1
		      AND S.PARENT_ID = CTE.HASH_ID
		      AND S.TARGET_ID = CTE.TARGET_ID
		      AND S.AP_NO = CTE.AP_NO
		)
		SELECT CTE.HASH_ID, CTE.FID
		FROM CTE 
		WHERE 1 = 1 
		AND CTE.FID IS NOT NULL
		GROUP BY CTE.TARGET_ID, CTE.HASH_ID
		ORDER BY CTE.FULL_NAME
		LIMIT 1
	</select>
	
	<select id="getsubpathTotal" resultType="hashmap" parameterType="hashmap">
		SELECT 	SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE1,
				SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE2,
				SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE3, 
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE4,
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE5,
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'VISA') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MAESTRO') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DINERS CLUB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'JCB') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'LASER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'CHINA UNION PAY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
		  		SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'DISCOVER') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
				SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'TROY') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'MASTERCARD') > 0 THEN S.MATCH_COUNT ELSE 0 END) +
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN S.MATCH_COUNT ELSE 0 END) AS TYPE6,
	
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'EMAIL') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE7,
			    SUM(CASE WHEN INSTR(UPPER(S.DATA_TYPE), 'SOUTH KOREAN MOBILE PHONE NUMBER') > 0 THEN S.MATCH_COUNT ELSE 0 END)	AS TYPE8,
			    S.object_id AS ID
		FROM pi_summary S
		WHERE 1=1
			AND S.target_id = #{target_id}
			AND S.AP_NO = #{ap_no}
			AND S.object_id = #{hash_id}
	</select>
    
	<select id="getMngrUser" resultType="hashmap" parameterType="hashmap">
		SELECT (SELECT USER_NAME FROM pi_user U WHERE U.USER_NO = TU.USER_NO) AS SERVICE_MNGR, 
		  	   (SELECT USER_NAME FROM pi_user U WHERE U.USER_NO = TU.SERVICE_MNGR2) AS SERVICE_MNGR2
		FROM pi_target_user TU
		WHERE TU.TARGET_ID = #{target_id}
			AND TU.AP_NO = #{ap_no}
		
    </select>
    
    <select id="getDetailReportServers" resultType="hashmap" parameterType="hashmap">
		SELECT F.TARGET_ID, 
			F.AP_NO,
			(SELECT T.NAME FROM PI_TARGETS T WHERE T.TARGET_ID = F.TARGET_ID AND T.AP_NO = F.AP_NO) AS HOST_NAME
		FROM PI_FIND F
			LEFT OUTER JOIN PI_TARGET_USER TU ON F.TARGET_ID = TU.TARGET_ID AND F.AP_NO = TU.AP_NO
		WHERE 1 = 1
		  AND F.REMEDIATION_STATUS IS NULL
		  AND F.DELDATE IS NULL
		  AND F.CREDATE BETWEEN CONCAT(#{sch_SDATE},' 00:00:00') AND CONCAT(#{sch_EDAT},' 23:59:59')
		  <if test="GROUP_ID != null and GROUP_ID != ''">
			  	AND TU.USER_NO IN (WITH RECURSIVE CTE AS (
					SELECT G.INSA_CODE AS INSA_CODE,
						G.TEAM_NAME,
						G.UP_IDX
					FROM pi_group G
					WHERE G.INSA_CODE=#{GROUP_ID}
					UNION ALL
					SELECT G1.INSA_CODE,
						G1.TEAM_NAME,
						G1.UP_IDX
					FROM pi_group G1, CTE
					WHERE CTE.INSA_CODE = G1.UP_IDX
				) 
				SELECT U.USER_NO
				FROM CTE, pi_user U
				WHERE CTE.INSA_CODE = U.INSA_CODE
				  AND U.ACC_YN = 'Y')
			  	<!-- AND F.OWNER IN (SELECT USER_NO FROM PI_USER WHERE INSA_CODE = #{GROUP_ID}) -->
		  </if>
		  <if test="SCH_OWNER != null and SCH_OWNER != ''">
		  	AND TU.USER_NO = #{SCH_OWNER}
			<!-- AND F.OWNER = #{SCH_OWNER}   -->
		  </if>	
		GROUP BY F.TARGET_ID, F.AP_NO
	
	</select>
</mapper>